/* Copyright (C) 1997 - 2008 Astrodienst AG, Switzerland.  All rights reserved.

  License conditions
  ------------------

  This file is part of Swiss Ephemeris.

  Swiss Ephemeris is distributed with NO WARRANTY OF ANY KIND.  No author
  or distributor accepts any responsibility for the consequences of using it,
  or for whether it serves any particular purpose or works at all, unless he
  or she says so in writing.  

  Swiss Ephemeris is made available by its authors under a dual licensing
  system. The software developer, who uses any part of Swiss Ephemeris
  in his or her software, must choose between one of the two license models,
  which are
  a) GNU public license version 2 or later
  b) Swiss Ephemeris Professional License

  The choice must be made before the software developer distributes software
  containing parts of Swiss Ephemeris to others, and before any public
  service using the developed software is activated.

  If the developer choses the GNU GPL software license, he or she must fulfill
  the conditions of that license, which includes the obligation to place his
  or her whole software project under the GNU GPL or a compatible license.
  See http://www.gnu.org/licenses/old-licenses/gpl-2.0.html

  If the developer choses the Swiss Ephemeris Professional license,
  he must follow the instructions as found in http://www.astro.com/swisseph/ 
  and purchase the Swiss Ephemeris Professional Edition from Astrodienst
  and sign the corresponding license contract.

  The License grants you the right to use, copy, modify and redistribute
  Swiss Ephemeris, but only under certain conditions described in the License.
  Among other things, the License requires that the copyright notices and
  this notice be preserved on all copies.

  Authors of the Swiss Ephemeris: Dieter Koch and Alois Treindl

  The authors of Swiss Ephemeris have no control or influence over any of
  the derived works, i.e. over software or services created by other
  programmers which use Swiss Ephemeris functions.

  The names of the authors or of the copyright holder (Astrodienst) must not
  be used for promoting any software, product or service which uses or contains
  the Swiss Ephemeris. This copyright notice is the ONLY place where the
  names of the authors can legally appear, except in cases where they have
  given special permission in writing.

  The trademarks 'Swiss Ephemeris' and 'Swiss Ephemeris inside' may be used
  for promoting such software, products or services.
*/

// Define global variables for swe_houses()
export let retc = 0;
export let nutlo = Array();

// Ported from the swe_houses() function from swehouse.c
// Calculate the Placidus House Cusps
/* housasp.c
 * cusps are returned in double cusp[13],
 *                           or cusp[37] with house system 'G'.
 * cusp[1...12]  houses 1 - 12
 * additional points are returned in ascmc[10].
 * ascmc[0] = ascendant
 * ascmc[1] = mc
 * ascmc[2] = armc
 * ascmc[3] = vertex
 * ascmc[4] = equasc    * "equatorial ascendant" *
 * ascmc[5] = coasc1    * "co-ascendant" (W. Koch) *
 * ascmc[6] = coasc2    * "co-ascendant" (M. Munkasey) *
 * ascmc[7] = polasc    * "polar ascendant" (M. Munkasey) *
 */
export const swe_houses = function(tjd_ut, geolat, geolon, hsys) {
  var tjde;
  var eps;
  var armc;

  tjde = tjd_ut + swe_deltat(tjd_ut);
  eps = swi_epsiln(tjde) * RADTODEG;
  swi_nutation(tjde);
  let i = 0;
  for (i = 0; i < 2; i++) {
    nutlo[i] *= RADTODEG;
  }
  armc = swe_degnorm(swe_sidtime0(tjd_ut, eps + nutlo[1], nutlo[0]) * 15 + geolon);
  retc = swe_houses_armc(armc, geolat, eps + nutlo[1], hsys);
};

// Constants from swephlib.h
/* Precession coefficients for remote past and future.
 * One of the following four defines must be true.
 */
var PREC_WILLIAMS_1994 = true; // used by Moshier for DE404
var PREC_SIMON_1994 = false;
// var PREC_LASKAR_1986 = false;
var PREC_BRETAGNON_2003 = false;

// IAU precession 1976 or 2003 for recent centuries.
// only one of the following two defines may be TRUE */
var PREC_IAU_2003 = true; // precession model P03
var PREC_IAU_1976 = false;
var PREC_IAU_1976_CTIES = 2.0; // J2000 +/- two centuries

// we use P03 for whole ephemeris
var PREC_IAU_2003_CTIES = 75.0; // J2000 +/- 75 centuries

// choose between the following nutation models
// var NUT_IAU_2000B = true; // fast, but precision of milli-arcsec
// var NUT_IAU_1980 = false;
// var NUT_IAU_2000A = false; // very time consuming! -- NOTE: Removed NUT_IAU_2000A algorithm from swi_nutation()

// Constants from swephlib.h
var DEGTORAD = Math.PI / 180;
var RADTODEG = 180 / Math.PI;

// Constant from swehouse.h
var VERY_SMALL = 1e-10;

// Constant from swephexp.h
// var SE_NASCMC = 8;

// Constants from swenut2000a.h
var O1MAS2DEG = 1 / 3600.0 / 10000000.0;
var NLS_2000B = 77;

// Luni-Solar argument multipliers
// L L' F D Om
var nls = [
/* eslint-disable prettier/prettier */
0, 0, 0, 0, 1,
0, 0, 2, -2, 2,
0, 0, 2, 0, 2,
0, 0, 0, 0, 2,
0, 1, 0, 0, 0,
0, 1, 2, -2, 2,
1, 0, 0, 0, 0,
0, 0, 2, 0, 1,
1, 0, 2, 0, 2,
0, -1, 2, -2, 2,
0, 0, 2, -2, 1,
-1, 0, 2, 0, 2,
-1, 0, 0, 2, 0,
1, 0, 0, 0, 1,
-1, 0, 0, 0, 1,
-1, 0, 2, 2, 2,
1, 0, 2, 0, 1,
-2, 0, 2, 0, 1,
0, 0, 0, 2, 0,
0, 0, 2, 2, 2,
0, -2, 2, -2, 2,
-2, 0, 0, 2, 0,
2, 0, 2, 0, 2,
1, 0, 2, -2, 2,
-1, 0, 2, 0, 1,
2, 0, 0, 0, 0,
0, 0, 2, 0, 0,
0, 1, 0, 0, 1,
-1, 0, 0, 2, 1,
0, 2, 2, -2, 2,
0, 0, -2, 2, 0,
1, 0, 0, -2, 1,
0, -1, 0, 0, 1,
-1, 0, 2, 2, 1,
0, 2, 0, 0, 0,
1, 0, 2, 2, 2,
-2, 0, 2, 0, 0,
0, 1, 2, 0, 2,
0, 0, 2, 2, 1,
0, -1, 2, 0, 2,
0, 0, 0, 2, 1,
1, 0, 2, -2, 1,
2, 0, 2, -2, 2,
-2, 0, 0, 2, 1,
2, 0, 2, 0, 1,
0, -1, 2, -2, 1,
0, 0, 0, -2, 1,
-1, -1, 0, 2, 0,
2, 0, 0, -2, 1,
1, 0, 0, 2, 0,
0, 1, 2, -2, 1,
1, -1, 0, 0, 0,
-2, 0, 2, 0, 2,
3, 0, 2, 0, 2,
0, -1, 0, 2, 0,
1, -1, 2, 0, 2,
0, 0, 0, 1, 0,
-1, -1, 2, 2, 2,
-1, 0, 2, 0, 0,
0, -1, 2, 2, 2,
-2, 0, 0, 0, 1,
1, 1, 2, 0, 2,
2, 0, 0, 0, 1,
-1, 1, 0, 1, 0,
1, 1, 0, 0, 0,
1, 0, 2, 0, 0,
-1, 0, 2, -2, 1,
1, 0, 0, 0, 2,
-1, 0, 0, 1, 0,
0, 0, 2, 1, 2,
-1, 0, 2, 4, 2,
-1, 1, 0, 1, 1,
0, -2, 2, -2, 1,
1, 0, 2, 2, 1,
-2, 0, 2, 2, 2,
-1, 0, 0, 0, 2,
1, 1, 2, -2, 2,
-2, 0, 2, 4, 2,
-1, 0, 4, 0, 2,
2, 0, 2, -2, 1,
2, 0, 2, 2, 2,
1, 0, 0, 2, 1,
3, 0, 0, 0, 0,
3, 0, 2, -2, 2,
0, 0, 4, -2, 2,
0, 1, 2, 0, 1,
0, 0, -2, 2, 1,
0, 0, 2, -2, 3,
-1, 0, 0, 4, 0,
2, 0, -2, 0, 1,
-2, 0, 0, 4, 0,
-1, -1, 0, 2, 1,
-1, 0, 0, 1, 1,
0, 1, 0, 0, 2,
0, 0, -2, 0, 1,
0, -1, 2, 0, 1,
0, 0, 2, -1, 2,
0, 0, 2, 4, 2,
-2, -1, 0, 2, 0,
1, 1, 0, -2, 1,
-1, 1, 0, 2, 0,
-1, 1, 0, 1, 2,
1, -1, 0, 0, 1,
1, -1, 2, 2, 2,
-1, 1, 2, 2, 2,
3, 0, 2, 0, 1,
0, 1, -2, 2, 0,
-1, 0, 0, -2, 1,
0, 1, 2, 2, 2,
-1, -1, 2, 2, 1,
0, -1, 0, 0, 2,
1, 0, 2, -4, 1,
-1, 0, -2, 2, 0,
0, -1, 2, 2, 1,
2, -1, 2, 0, 2,
0, 0, 0, 2, 2,
1, -1, 2, 0, 1,
-1, 1, 2, 0, 2,
0, 1, 0, 2, 0,
0, -1, -2, 2, 0,
0, 3, 2, -2, 2,
0, 0, 0, 1, 1,
-1, 0, 2, 2, 0,
2, 1, 2, 0, 2,
1, 1, 0, 0, 1,
1, 1, 2, 0, 1,
2, 0, 0, 2, 0,
1, 0, -2, 2, 0,
-1, 0, 0, 2, 2,
0, 1, 0, 1, 0,
0, 1, 0, -2, 1,
-1, 0, 2, -2, 2,
0, 0, 0, -1, 1,
-1, 1, 0, 0, 1,
1, 0, 2, -1, 2,
1, -1, 0, 2, 0,
0, 0, 0, 4, 0,
1, 0, 2, 1, 2,
0, 0, 2, 1, 1,
1, 0, 0, -2, 2,
-1, 0, 2, 4, 1,
1, 0, -2, 0, 1,
1, 1, 2, -2, 1,
0, 0, 2, 2, 0,
-1, 0, 2, -1, 1,
-2, 0, 2, 2, 1,
4, 0, 2, 0, 2,
2, -1, 0, 0, 0,
2, 1, 2, -2, 2,
0, 1, 2, 1, 2,
1, 0, 4, -2, 2,
-1, -1, 0, 0, 1,
0, 1, 0, 2, 1,
-2, 0, 2, 4, 1,
2, 0, 2, 0, 0,
1, 0, 0, 1, 0,
-1, 0, 0, 4, 1,
-1, 0, 4, 0, 1,
2, 0, 2, 2, 1,
0, 0, 2, -3, 2,
-1, -2, 0, 2, 0,
2, 1, 0, 0, 0,
0, 0, 4, 0, 2,
0, 0, 0, 0, 3,
0, 3, 0, 0, 0,
0, 0, 2, -4, 1,
0, -1, 0, 2, 1,
0, 0, 0, 4, 1,
-1, -1, 2, 4, 2,
1, 0, 2, 4, 2,
-2, 2, 0, 2, 0,
-2, -1, 2, 0, 1,
-2, 0, 0, 2, 2,
-1, -1, 2, 0, 2,
0, 0, 4, -2, 1,
3, 0, 2, -2, 1,
-2, -1, 0, 2, 1,
1, 0, 0, -1, 1,
0, -2, 0, 2, 0,
-2, 0, 0, 4, 1,
-3, 0, 0, 0, 1,
1, 1, 2, 2, 2,
0, 0, 2, 4, 1,
3, 0, 2, 2, 2,
-1, 1, 2, -2, 1,
2, 0, 0, -4, 1,
0, 0, 0, -2, 2,
2, 0, 2, -4, 1,
-1, 1, 0, 2, 1,
0, 0, 2, -1, 1,
0, -2, 2, 2, 2,
2, 0, 0, 2, 1,
4, 0, 2, -2, 2,
2, 0, 0, -2, 2,
0, 2, 0, 0, 1,
1, 0, 0, -4, 1,
0, 2, 2, -2, 1,
-3, 0, 0, 4, 0,
-1, 1, 2, 0, 1,
-1, -1, 0, 4, 0,
-1, -2, 2, 2, 2,
-2, -1, 2, 4, 2,
1, -1, 2, 2, 1,
-2, 1, 0, 2, 0,
-2, 1, 2, 0, 1,
2, 1, 0, -2, 1,
-3, 0, 2, 0, 1,
-2, 0, 2, -2, 1,
-1, 1, 0, 2, 2,
0, -1, 2, -1, 2,
-1, 0, 4, -2, 2,
0, -2, 2, 0, 2,
-1, 0, 2, 1, 2,
2, 0, 0, 0, 2,
0, 0, 2, 0, 3,
-2, 0, 4, 0, 2,
-1, 0, -2, 0, 1,
-1, 1, 2, 2, 1,
3, 0, 0, 0, 1,
-1, 0, 2, 3, 2,
2, -1, 2, 0, 1,
0, 1, 2, 2, 1,
0, -1, 2, 4, 2,
2, -1, 2, 2, 2,
0, 2, -2, 2, 0,
-1, -1, 2, -1, 1,
0, -2, 0, 0, 1,
1, 0, 2, -4, 2,
1, -1, 0, -2, 1,
-1, -1, 2, 0, 1,
1, -1, 2, -2, 2,
-2, -1, 0, 4, 0,
-1, 0, 0, 3, 0,
-2, -1, 2, 2, 2,
0, 2, 2, 0, 2,
1, 1, 0, 2, 0,
2, 0, 2, -1, 2,
1, 0, 2, 1, 1,
4, 0, 0, 0, 0,
2, 1, 2, 0, 1,
3, -1, 2, 0, 2,
-2, 2, 0, 2, 1,
1, 0, 2, -3, 1,
1, 1, 2, -4, 1,
-1, -1, 2, -2, 1,
0, -1, 0, -1, 1,
0, -1, 0, -2, 1,
-2, 0, 0, 0, 2,
-2, 0, -2, 2, 0,
-1, 0, -2, 4, 0,
1, -2, 0, 0, 0,
0, 1, 0, 1, 1,
-1, 2, 0, 2, 0,
1, -1, 2, -2, 1,
1, 2, 2, -2, 2,
2, -1, 2, -2, 2,
1, 0, 2, -1, 1,
2, 1, 2, -2, 1,
-2, 0, 0, -2, 1,
1, -2, 2, 0, 2,
0, 1, 2, 1, 1,
1, 0, 4, -2, 1,
-2, 0, 4, 2, 2,
1, 1, 2, 1, 2,
1, 0, 0, 4, 0,
1, 0, 2, 2, 0,
2, 0, 2, 1, 2,
3, 1, 2, 0, 2,
4, 0, 2, 0, 1,
-2, -1, 2, 0, 0,
0, 1, -2, 2, 1,
1, 0, -2, 1, 0,
0, -1, -2, 2, 1,
2, -1, 0, -2, 1,
-1, 0, 2, -1, 2,
1, 0, 2, -3, 2,
0, 1, 2, -2, 3,
0, 0, 2, -3, 1,
-1, 0, -2, 2, 1,
0, 0, 2, -4, 2,
-2, 1, 0, 0, 1,
-1, 0, 0, -1, 1,
2, 0, 2, -4, 2,
0, 0, 4, -4, 4,
0, 0, 4, -4, 2,
-1, -2, 0, 2, 1,
-2, 0, 0, 3, 0,
1, 0, -2, 2, 1,
-3, 0, 2, 2, 2,
-3, 0, 2, 2, 1,
-2, 0, 2, 2, 0,
2, -1, 0, 0, 1,
-2, 1, 2, 2, 2,
1, 1, 0, 1, 0,
0, 1, 4, -2, 2,
-1, 1, 0, -2, 1,
0, 0, 0, -4, 1,
1, -1, 0, 2, 1,
1, 1, 0, 2, 1,
-1, 2, 2, 2, 2,
3, 1, 2, -2, 2,
0, -1, 0, 4, 0,
2, -1, 0, 2, 0,
0, 0, 4, 0, 1,
2, 0, 4, -2, 2,
-1, -1, 2, 4, 1,
1, 0, 0, 4, 1,
1, -2, 2, 2, 2,
0, 0, 2, 3, 2,
-1, 1, 2, 4, 2,
3, 0, 0, 2, 0,
-1, 0, 4, 2, 2,
1, 1, 2, 2, 1,
-2, 0, 2, 6, 2,
2, 1, 2, 2, 2,
-1, 0, 2, 6, 2,
1, 0, 2, 4, 1,
2, 0, 2, 4, 2,
1, 1, -2, 1, 0,
-3, 1, 2, 1, 2,
2, 0, -2, 0, 2,
-1, 0, 0, 1, 2,
-4, 0, 2, 2, 1,
-1, -1, 0, 1, 0,
0, 0, -2, 2, 2,
1, 0, 0, -1, 2,
0, -1, 2, -2, 3,
-2, 1, 2, 0, 0,
0, 0, 2, -2, 4,
-2, -2, 0, 2, 0,
-2, 0, -2, 4, 0,
0, -2, -2, 2, 0,
1, 2, 0, -2, 1,
3, 0, 0, -4, 1,
-1, 1, 2, -2, 2,
1, -1, 2, -4, 1,
1, 1, 0, -2, 2,
-3, 0, 2, 0, 0,
-3, 0, 2, 0, 2,
-2, 0, 0, 1, 0,
0, 0, -2, 1, 0,
-3, 0, 0, 2, 1,
-1, -1, -2, 2, 0,
0, 1, 2, -4, 1,
2, 1, 0, -4, 1,
0, 2, 0, -2, 1,
1, 0, 0, -3, 1,
-2, 0, 2, -2, 2,
-2, -1, 0, 0, 1,
-4, 0, 0, 2, 0,
1, 1, 0, -4, 1,
-1, 0, 2, -4, 1,
0, 0, 4, -4, 1,
0, 3, 2, -2, 2,
-3, -1, 0, 4, 0,
-3, 0, 0, 4, 1,
1, -1, -2, 2, 0,
-1, -1, 0, 2, 2,
1, -2, 0, 0, 1,
1, -1, 0, 0, 2,
0, 0, 0, 1, 2,
-1, -1, 2, 0, 0,
1, -2, 2, -2, 2,
0, -1, 2, -1, 1,
-1, 0, 2, 0, 3,
1, 1, 0, 0, 2,
-1, 1, 2, 0, 0,
1, 2, 0, 0, 0,
-1, 2, 2, 0, 2,
-1, 0, 4, -2, 1,
3, 0, 2, -4, 2,
1, 2, 2, -2, 1,
1, 0, 4, -4, 2,
-2, -1, 0, 4, 1,
0, -1, 0, 2, 2,
-2, 1, 0, 4, 0,
-2, -1, 2, 2, 1,
2, 0, -2, 2, 0,
1, 0, 0, 1, 1,
0, 1, 0, 2, 2,
1, -1, 2, -1, 2,
-2, 0, 4, 0, 1,
2, 1, 0, 0, 1,
0, 1, 2, 0, 0,
0, -1, 4, -2, 2,
0, 0, 4, -2, 4,
0, 2, 2, 0, 1,
-3, 0, 0, 6, 0,
-1, -1, 0, 4, 1,
1, -2, 0, 2, 0,
-1, 0, 0, 4, 2,
-1, -2, 2, 2, 1,
-1, 0, 0, -2, 2,
1, 0, -2, -2, 1,
0, 0, -2, -2, 1,
-2, 0, -2, 0, 1,
0, 0, 0, 3, 1,
0, 0, 0, 3, 0,
-1, 1, 0, 4, 0,
-1, -1, 2, 2, 0,
-2, 0, 2, 3, 2,
1, 0, 0, 2, 2,
0, -1, 2, 1, 2,
3, -1, 0, 0, 0,
2, 0, 0, 1, 0,
1, -1, 2, 0, 0,
0, 0, 2, 1, 0,
1, 0, 2, 0, 3,
3, 1, 0, 0, 0,
3, -1, 2, -2, 2,
2, 0, 2, -1, 1,
1, 1, 2, 0, 0,
0, 0, 4, -1, 2,
1, 2, 2, 0, 2,
-2, 0, 0, 6, 0,
0, -1, 0, 4, 1,
-2, -1, 2, 4, 1,
0, -2, 2, 2, 1,
0, -1, 2, 2, 0,
-1, 0, 2, 3, 1,
-2, 1, 2, 4, 2,
2, 0, 0, 2, 2,
2, -2, 2, 0, 2,
-1, 1, 2, 3, 2,
3, 0, 2, -1, 2,
4, 0, 2, -2, 1,
-1, 0, 0, 6, 0,
-1, -2, 2, 4, 2,
-3, 0, 2, 6, 2,
-1, 0, 2, 4, 0,
3, 0, 0, 2, 1,
3, -1, 2, 0, 1,
3, 0, 2, 0, 0,
1, 0, 4, 0, 2,
5, 0, 2, -2, 2,
0, -1, 2, 4, 1,
2, -1, 2, 2, 1,
0, 1, 2, 4, 2,
1, -1, 2, 4, 2,
3, -1, 2, 2, 2,
3, 0, 2, 2, 1,
5, 0, 2, 0, 2,
0, 0, 2, 6, 2,
4, 0, 2, 2, 2,
0, -1, 1, -1, 1,
-1, 0, 1, 0, 3,
0, -2, 2, -2, 3,
1, 0, -1, 0, 1,
2, -2, 0, -2, 1,
-1, 0, 1, 0, 2,
-1, 0, 1, 0, 1,
-1, -1, 2, -1, 2,
-2, 2, 0, 2, 2,
-1, 0, 1, 0, 0,
-4, 1, 2, 2, 2,
-3, 0, 2, 1, 1,
-2, -1, 2, 0, 2,
1, 0, -2, 1, 1,
2, -1, -2, 0, 1,
-4, 0, 2, 2, 0,
-3, 1, 0, 3, 0,
-1, 0, -1, 2, 0,
0, -2, 0, 0, 2,
0, -2, 0, 0, 2,
-3, 0, 0, 3, 0,
-2, -1, 0, 2, 2,
-1, 0, -2, 3, 0,
-4, 0, 0, 4, 0,
2, 1, -2, 0, 1,
2, -1, 0, -2, 2,
0, 0, 1, -1, 0,
-1, 2, 0, 1, 0,
-2, 1, 2, 0, 2,
1, 1, 0, -1, 1,
1, 0, 1, -2, 1,
0, 2, 0, 0, 2,
1, -1, 2, -3, 1,
-1, 1, 2, -1, 1,
-2, 0, 4, -2, 2,
-2, 0, 4, -2, 1,
-2, -2, 0, 2, 1,
-2, 0, -2, 4, 0,
1, 2, 2, -4, 1,
1, 1, 2, -4, 2,
-1, 2, 2, -2, 1,
2, 0, 0, -3, 1,
-1, 2, 0, 0, 1,
0, 0, 0, -2, 0,
-1, -1, 2, -2, 2,
-1, 1, 0, 0, 2,
0, 0, 0, -1, 2,
-2, 1, 0, 1, 0,
1, -2, 0, -2, 1,
1, 0, -2, 0, 2,
-3, 1, 0, 2, 0,
-1, 1, -2, 2, 0,
-1, -1, 0, 0, 2,
-3, 0, 0, 2, 0,
-3, -1, 0, 2, 0,
2, 0, 2, -6, 1,
0, 1, 2, -4, 2,
2, 0, 0, -4, 2,
-2, 1, 2, -2, 1,
0, -1, 2, -4, 1,
0, 1, 0, -2, 2,
-1, 0, 0, -2, 0,
2, 0, -2, -2, 1,
-4, 0, 2, 0, 1,
-1, -1, 0, -1, 1,
0, 0, -2, 0, 2,
-3, 0, 0, 1, 0,
-1, 0, -2, 1, 0,
-2, 0, -2, 2, 1,
0, 0, -4, 2, 0,
-2, -1, -2, 2, 0,
1, 0, 2, -6, 1,
-1, 0, 2, -4, 2,
1, 0, 0, -4, 2,
2, 1, 2, -4, 2,
2, 1, 2, -4, 1,
0, 1, 4, -4, 4,
0, 1, 4, -4, 2,
-1, -1, -2, 4, 0,
-1, -3, 0, 2, 0,
-1, 0, -2, 4, 1,
-2, -1, 0, 3, 0,
0, 0, -2, 3, 0,
-2, 0, 0, 3, 1,
0, -1, 0, 1, 0,
-3, 0, 2, 2, 0,
1, 1, -2, 2, 0,
-1, 1, 0, 2, 2,
1, -2, 2, -2, 1,
0, 0, 1, 0, 2,
0, 0, 1, 0, 1,
0, 0, 1, 0, 0,
-1, 2, 0, 2, 1,
0, 0, 2, 0, 2,
-2, 0, 2, 0, 2,
2, 0, 0, -1, 1,
3, 0, 0, -2, 1,
1, 0, 2, -2, 3,
1, 2, 0, 0, 1,
2, 0, 2, -3, 2,
-1, 1, 4, -2, 2,
-2, -2, 0, 4, 0,
0, -3, 0, 2, 0,
0, 0, -2, 4, 0,
-1, -1, 0, 3, 0,
-2, 0, 0, 4, 2,
-1, 0, 0, 3, 1,
2, -2, 0, 0, 0,
1, -1, 0, 1, 0,
-1, 0, 0, 2, 0,
0, -2, 2, 0, 1,
-1, 0, 1, 2, 1,
-1, 1, 0, 3, 0,
-1, -1, 2, 1, 2,
0, -1, 2, 0, 0,
-2, 1, 2, 2, 1,
2, -2, 2, -2, 2,
1, 1, 0, 1, 1,
1, 0, 1, 0, 1,
1, 0, 1, 0, 0,
0, 2, 0, 2, 0,
2, -1, 2, -2, 1,
0, -1, 4, -2, 1,
0, 0, 4, -2, 3,
0, 1, 4, -2, 1,
4, 0, 2, -4, 2,
2, 2, 2, -2, 2,
2, 0, 4, -4, 2,
-1, -2, 0, 4, 0,
-1, -3, 2, 2, 2,
-3, 0, 2, 4, 2,
-3, 0, 2, -2, 1,
-1, -1, 0, -2, 1,
-3, 0, 0, 0, 2,
-3, 0, -2, 2, 0,
0, 1, 0, -4, 1,
-2, 1, 0, -2, 1,
-4, 0, 0, 0, 1,
-1, 0, 0, -4, 1,
-3, 0, 0, -2, 1,
0, 0, 0, 3, 2,
-1, 1, 0, 4, 1,
1, -2, 2, 0, 1,
0, 1, 0, 3, 0,
-1, 0, 2, 2, 3,
0, 0, 2, 2, 2,
-2, 0, 2, 2, 2,
-1, 1, 2, 2, 0,
3, 0, 0, 0, 2,
2, 1, 0, 1, 0,
2, -1, 2, -1, 2,
0, 0, 2, 0, 1,
0, 0, 3, 0, 3,
0, 0, 3, 0, 2,
-1, 2, 2, 2, 1,
-1, 0, 4, 0, 0,
1, 2, 2, 0, 1,
3, 1, 2, -2, 1,
1, 1, 4, -2, 2,
-2, -1, 0, 6, 0,
0, -2, 0, 4, 0,
-2, 0, 0, 6, 1,
-2, -2, 2, 4, 2,
0, -3, 2, 2, 2,
0, 0, 0, 4, 2,
-1, -1, 2, 3, 2,
-2, 0, 2, 4, 0,
2, -1, 0, 2, 1,
1, 0, 0, 3, 0,
0, 1, 0, 4, 1,
0, 1, 0, 4, 0,
1, -1, 2, 1, 2,
0, 0, 2, 2, 3,
1, 0, 2, 2, 2,
-1, 0, 2, 2, 2,
-2, 0, 4, 2, 1,
2, 1, 0, 2, 1,
2, 1, 0, 2, 0,
2, -1, 2, 0, 0,
1, 0, 2, 1, 0,
0, 1, 2, 2, 0,
2, 0, 2, 0, 3,
3, 0, 2, 0, 2,
1, 0, 2, 0, 2,
1, 0, 3, 0, 3,
1, 1, 2, 1, 1,
0, 2, 2, 2, 2,
2, 1, 2, 0, 0,
2, 0, 4, -2, 1,
4, 1, 2, -2, 2,
-1, -1, 0, 6, 0,
-3, -1, 2, 6, 2,
-1, 0, 0, 6, 1,
-3, 0, 2, 6, 1,
1, -1, 0, 4, 1,
1, -1, 0, 4, 0,
-2, 0, 2, 5, 2,
1, -2, 2, 2, 1,
3, -1, 0, 2, 0,
1, -1, 2, 2, 0,
0, 0, 2, 3, 1,
-1, 1, 2, 4, 1,
0, 1, 2, 3, 2,
-1, 0, 4, 2, 1,
2, 0, 2, 1, 1,
5, 0, 0, 0, 0,
2, 1, 2, 1, 2,
1, 0, 4, 0, 1,
3, 1, 2, 0, 1,
3, 0, 4, -2, 2,
-2, -1, 2, 6, 2,
0, 0, 0, 6, 0,
0, -2, 2, 4, 2,
-2, 0, 2, 6, 1,
2, 0, 0, 4, 1,
2, 0, 0, 4, 0,
2, -2, 2, 2, 2,
0, 0, 2, 4, 0,
1, 0, 2, 3, 2,
4, 0, 0, 2, 0,
2, 0, 2, 2, 0,
0, 0, 4, 2, 2,
4, -1, 2, 0, 2,
3, 0, 2, 1, 2,
2, 1, 2, 2, 1,
4, 1, 2, 0, 2,
-1, -1, 2, 6, 2,
-1, 0, 2, 6, 1,
1, -1, 2, 4, 1,
1, 1, 2, 4, 2,
3, 1, 2, 2, 2,
5, 0, 2, 0, 1,
2, -1, 2, 4, 2,
2, 0, 2, 4, 1
  /* eslint-enable prettier/prettier */
];

// Luni-Solar nutation coefficients, unit 1e-7 arcsec
// longitude (sin, t*sin, cos), obliquity (cos, t*cos, sin)
var cls = [
/* eslint-disable prettier/prettier */
-172064161, -174666, 33386, 92052331, 9086, 15377,
-13170906, -1675, -13696, 5730336, -3015, -4587,
-2276413, -234, 2796, 978459, -485, 1374,
2074554, 207, -698, -897492, 470, -291,
1475877, -3633, 11817, 73871, -184, -1924,
-516821, 1226, -524, 224386, -677, -174,
711159, 73, -872, -6750, 0, 358,
-387298, -367, 380, 200728, 18, 318,
-301461, -36, 816, 129025, -63, 367,
215829, -494, 111, -95929, 299, 132,
128227, 137, 181, -68982, -9, 39,
123457, 11, 19, -53311, 32, -4,
156994, 10, -168, -1235, 0, 82,
63110, 63, 27, -33228, 0, -9,
-57976, -63, -189, 31429, 0, -75,
-59641, -11, 149, 25543, -11, 66,
-51613, -42, 129, 26366, 0, 78,
45893, 50, 31, -24236, -10, 20,
63384, 11, -150, -1220, 0, 29,
-38571, -1, 158, 16452, -11, 68,
32481, 0, 0, -13870, 0, 0,
-47722, 0, -18, 477, 0, -25,
-31046, -1, 131, 13238, -11, 59,
28593, 0, -1, -12338, 10, -3,
20441, 21, 10, -10758, 0, -3,
29243, 0, -74, -609, 0, 13,
25887, 0, -66, -550, 0, 11,
-14053, -25, 79, 8551, -2, -45,
15164, 10, 11, -8001, 0, -1,
-15794, 72, -16, 6850, -42, -5,
21783, 0, 13, -167, 0, 13,
-12873, -10, -37, 6953, 0, -14,
-12654, 11, 63, 6415, 0, 26,
-10204, 0, 25, 5222, 0, 15,
16707, -85, -10, 168, -1, 10,
-7691, 0, 44, 3268, 0, 19,
-11024, 0, -14, 104, 0, 2,
7566, -21, -11, -3250, 0, -5,
-6637, -11, 25, 3353, 0, 14,
-7141, 21, 8, 3070, 0, 4,
-6302, -11, 2, 3272, 0, 4,
5800, 10, 2, -3045, 0, -1,
6443, 0, -7, -2768, 0, -4,
-5774, -11, -15, 3041, 0, -5,
-5350, 0, 21, 2695, 0, 12,
-4752, -11, -3, 2719, 0, -3,
-4940, -11, -21, 2720, 0, -9,
7350, 0, -8, -51, 0, 4,
4065, 0, 6, -2206, 0, 1,
6579, 0, -24, -199, 0, 2,
3579, 0, 5, -1900, 0, 1,
4725, 0, -6, -41, 0, 3,
-3075, 0, -2, 1313, 0, -1,
-2904, 0, 15, 1233, 0, 7,
4348, 0, -10, -81, 0, 2,
-2878, 0, 8, 1232, 0, 4,
-4230, 0, 5, -20, 0, -2,
-2819, 0, 7, 1207, 0, 3,
-4056, 0, 5, 40, 0, -2,
-2647, 0, 11, 1129, 0, 5,
-2294, 0, -10, 1266, 0, -4,
2481, 0, -7, -1062, 0, -3,
2179, 0, -2, -1129, 0, -2,
3276, 0, 1, -9, 0, 0,
-3389, 0, 5, 35, 0, -2,
3339, 0, -13, -107, 0, 1,
-1987, 0, -6, 1073, 0, -2,
-1981, 0, 0, 854, 0, 0,
4026, 0, -353, -553, 0, -139,
1660, 0, -5, -710, 0, -2,
-1521, 0, 9, 647, 0, 4,
1314, 0, 0, -700, 0, 0,
-1283, 0, 0, 672, 0, 0,
-1331, 0, 8, 663, 0, 4,
1383, 0, -2, -594, 0, -2,
1405, 0, 4, -610, 0, 2,
1290, 0, 0, -556, 0, 0,
-1214, 0, 5, 518, 0, 2,
1146, 0, -3, -490, 0, -1,
1019, 0, -1, -527, 0, -1,
-1100, 0, 9, 465, 0, 4,
-970, 0, 2, 496, 0, 1,
1575, 0, -6, -50, 0, 0,
934, 0, -3, -399, 0, -1,
922, 0, -1, -395, 0, -1,
815, 0, -1, -422, 0, -1,
834, 0, 2, -440, 0, 1,
1248, 0, 0, -170, 0, 1,
1338, 0, -5, -39, 0, 0,
716, 0, -2, -389, 0, -1,
1282, 0, -3, -23, 0, 1,
742, 0, 1, -391, 0, 0,
1020, 0, -25, -495, 0, -10,
715, 0, -4, -326, 0, 2,
-666, 0, -3, 369, 0, -1,
-667, 0, 1, 346, 0, 1,
-704, 0, 0, 304, 0, 0,
-694, 0, 5, 294, 0, 2,
-1014, 0, -1, 4, 0, -1,
-585, 0, -2, 316, 0, -1,
-949, 0, 1, 8, 0, -1,
-595, 0, 0, 258, 0, 0,
528, 0, 0, -279, 0, 0,
-590, 0, 4, 252, 0, 2,
570, 0, -2, -244, 0, -1,
-502, 0, 3, 250, 0, 2,
-875, 0, 1, 29, 0, 0,
-492, 0, -3, 275, 0, -1,
535, 0, -2, -228, 0, -1,
-467, 0, 1, 240, 0, 1,
591, 0, 0, -253, 0, 0,
-453, 0, -1, 244, 0, -1,
766, 0, 1, 9, 0, 0,
-446, 0, 2, 225, 0, 1,
-488, 0, 2, 207, 0, 1,
-468, 0, 0, 201, 0, 0,
-421, 0, 1, 216, 0, 1,
463, 0, 0, -200, 0, 0,
-673, 0, 2, 14, 0, 0,
658, 0, 0, -2, 0, 0,
-438, 0, 0, 188, 0, 0,
-390, 0, 0, 205, 0, 0,
639, -11, -2, -19, 0, 0,
412, 0, -2, -176, 0, -1,
-361, 0, 0, 189, 0, 0,
360, 0, -1, -185, 0, -1,
588, 0, -3, -24, 0, 0,
-578, 0, 1, 5, 0, 0,
-396, 0, 0, 171, 0, 0,
565, 0, -1, -6, 0, 0,
-335, 0, -1, 184, 0, -1,
357, 0, 1, -154, 0, 0,
321, 0, 1, -174, 0, 0,
-301, 0, -1, 162, 0, 0,
-334, 0, 0, 144, 0, 0,
493, 0, -2, -15, 0, 0,
494, 0, -2, -19, 0, 0,
337, 0, -1, -143, 0, -1,
280, 0, -1, -144, 0, 0,
309, 0, 1, -134, 0, 0,
-263, 0, 2, 131, 0, 1,
253, 0, 1, -138, 0, 0,
245, 0, 0, -128, 0, 0,
416, 0, -2, -17, 0, 0,
-229, 0, 0, 128, 0, 0,
231, 0, 0, -120, 0, 0,
-259, 0, 2, 109, 0, 1,
375, 0, -1, -8, 0, 0,
252, 0, 0, -108, 0, 0,
-245, 0, 1, 104, 0, 0,
243, 0, -1, -104, 0, 0,
208, 0, 1, -112, 0, 0,
199, 0, 0, -102, 0, 0,
-208, 0, 1, 105, 0, 0,
335, 0, -2, -14, 0, 0,
-325, 0, 1, 7, 0, 0,
-187, 0, 0, 96, 0, 0,
197, 0, -1, -100, 0, 0,
-192, 0, 2, 94, 0, 1,
-188, 0, 0, 83, 0, 0,
276, 0, 0, -2, 0, 0,
-286, 0, 1, 6, 0, 0,
186, 0, -1, -79, 0, 0,
-219, 0, 0, 43, 0, 0,
276, 0, 0, 2, 0, 0,
-153, 0, -1, 84, 0, 0,
-156, 0, 0, 81, 0, 0,
-154, 0, 1, 78, 0, 0,
-174, 0, 1, 75, 0, 0,
-163, 0, 2, 69, 0, 1,
-228, 0, 0, 1, 0, 0,
91, 0, -4, -54, 0, -2,
175, 0, 0, -75, 0, 0,
-159, 0, 0, 69, 0, 0,
141, 0, 0, -72, 0, 0,
147, 0, 0, -75, 0, 0,
-132, 0, 0, 69, 0, 0,
159, 0, -28, -54, 0, 11,
213, 0, 0, -4, 0, 0,
123, 0, 0, -64, 0, 0,
-118, 0, -1, 66, 0, 0,
144, 0, -1, -61, 0, 0,
-121, 0, 1, 60, 0, 0,
-134, 0, 1, 56, 0, 1,
-105, 0, 0, 57, 0, 0,
-102, 0, 0, 56, 0, 0,
120, 0, 0, -52, 0, 0,
101, 0, 0, -54, 0, 0,
-113, 0, 0, 59, 0, 0,
-106, 0, 0, 61, 0, 0,
-129, 0, 1, 55, 0, 0,
-114, 0, 0, 57, 0, 0,
113, 0, -1, -49, 0, 0,
-102, 0, 0, 44, 0, 0,
-94, 0, 0, 51, 0, 0,
-100, 0, -1, 56, 0, 0,
87, 0, 0, -47, 0, 0,
161, 0, 0, -1, 0, 0,
96, 0, 0, -50, 0, 0,
151, 0, -1, -5, 0, 0,
-104, 0, 0, 44, 0, 0,
-110, 0, 0, 48, 0, 0,
-100, 0, 1, 50, 0, 0,
92, 0, -5, 12, 0, -2,
82, 0, 0, -45, 0, 0,
82, 0, 0, -45, 0, 0,
-78, 0, 0, 41, 0, 0,
-77, 0, 0, 43, 0, 0,
2, 0, 0, 54, 0, 0,
94, 0, 0, -40, 0, 0,
-93, 0, 0, 40, 0, 0,
-83, 0, 10, 40, 0, -2,
83, 0, 0, -36, 0, 0,
-91, 0, 0, 39, 0, 0,
128, 0, 0, -1, 0, 0,
-79, 0, 0, 34, 0, 0,
-83, 0, 0, 47, 0, 0,
84, 0, 0, -44, 0, 0,
83, 0, 0, -43, 0, 0,
91, 0, 0, -39, 0, 0,
-77, 0, 0, 39, 0, 0,
84, 0, 0, -43, 0, 0,
-92, 0, 1, 39, 0, 0,
-92, 0, 1, 39, 0, 0,
-94, 0, 0, 0, 0, 0,
68, 0, 0, -36, 0, 0,
-61, 0, 0, 32, 0, 0,
71, 0, 0, -31, 0, 0,
62, 0, 0, -34, 0, 0,
-63, 0, 0, 33, 0, 0,
-73, 0, 0, 32, 0, 0,
115, 0, 0, -2, 0, 0,
-103, 0, 0, 2, 0, 0,
63, 0, 0, -28, 0, 0,
74, 0, 0, -32, 0, 0,
-103, 0, -3, 3, 0, -1,
-69, 0, 0, 30, 0, 0,
57, 0, 0, -29, 0, 0,
94, 0, 0, -4, 0, 0,
64, 0, 0, -33, 0, 0,
-63, 0, 0, 26, 0, 0,
-38, 0, 0, 20, 0, 0,
-43, 0, 0, 24, 0, 0,
-45, 0, 0, 23, 0, 0,
47, 0, 0, -24, 0, 0,
-48, 0, 0, 25, 0, 0,
45, 0, 0, -26, 0, 0,
56, 0, 0, -25, 0, 0,
88, 0, 0, 2, 0, 0,
-75, 0, 0, 0, 0, 0,
85, 0, 0, 0, 0, 0,
49, 0, 0, -26, 0, 0,
-74, 0, -3, -1, 0, -1,
-39, 0, 0, 21, 0, 0,
45, 0, 0, -20, 0, 0,
51, 0, 0, -22, 0, 0,
-40, 0, 0, 21, 0, 0,
41, 0, 0, -21, 0, 0,
-42, 0, 0, 24, 0, 0,
-51, 0, 0, 22, 0, 0,
-42, 0, 0, 22, 0, 0,
39, 0, 0, -21, 0, 0,
46, 0, 0, -18, 0, 0,
-53, 0, 0, 22, 0, 0,
82, 0, 0, -4, 0, 0,
81, 0, -1, -4, 0, 0,
47, 0, 0, -19, 0, 0,
53, 0, 0, -23, 0, 0,
-45, 0, 0, 22, 0, 0,
-44, 0, 0, -2, 0, 0,
-33, 0, 0, 16, 0, 0,
-61, 0, 0, 1, 0, 0,
28, 0, 0, -15, 0, 0,
-38, 0, 0, 19, 0, 0,
-33, 0, 0, 21, 0, 0,
-60, 0, 0, 0, 0, 0,
48, 0, 0, -10, 0, 0,
27, 0, 0, -14, 0, 0,
38, 0, 0, -20, 0, 0,
31, 0, 0, -13, 0, 0,
-29, 0, 0, 15, 0, 0,
28, 0, 0, -15, 0, 0,
-32, 0, 0, 15, 0, 0,
45, 0, 0, -8, 0, 0,
-44, 0, 0, 19, 0, 0,
28, 0, 0, -15, 0, 0,
-51, 0, 0, 0, 0, 0,
-36, 0, 0, 20, 0, 0,
44, 0, 0, -19, 0, 0,
26, 0, 0, -14, 0, 0,
-60, 0, 0, 2, 0, 0,
35, 0, 0, -18, 0, 0,
-27, 0, 0, 11, 0, 0,
47, 0, 0, -1, 0, 0,
36, 0, 0, -15, 0, 0,
-36, 0, 0, 20, 0, 0,
-35, 0, 0, 19, 0, 0,
-37, 0, 0, 19, 0, 0,
32, 0, 0, -16, 0, 0,
35, 0, 0, -14, 0, 0,
32, 0, 0, -13, 0, 0,
65, 0, 0, -2, 0, 0,
47, 0, 0, -1, 0, 0,
32, 0, 0, -16, 0, 0,
37, 0, 0, -16, 0, 0,
-30, 0, 0, 15, 0, 0,
-32, 0, 0, 16, 0, 0,
-31, 0, 0, 13, 0, 0,
37, 0, 0, -16, 0, 0,
31, 0, 0, -13, 0, 0,
49, 0, 0, -2, 0, 0,
32, 0, 0, -13, 0, 0,
23, 0, 0, -12, 0, 0,
-43, 0, 0, 18, 0, 0,
26, 0, 0, -11, 0, 0,
-32, 0, 0, 14, 0, 0,
-29, 0, 0, 14, 0, 0,
-27, 0, 0, 12, 0, 0,
30, 0, 0, 0, 0, 0,
-11, 0, 0, 5, 0, 0,
-21, 0, 0, 10, 0, 0,
-34, 0, 0, 15, 0, 0,
-10, 0, 0, 6, 0, 0,
-36, 0, 0, 0, 0, 0,
-9, 0, 0, 4, 0, 0,
-12, 0, 0, 5, 0, 0,
-21, 0, 0, 5, 0, 0,
-29, 0, 0, -1, 0, 0,
-15, 0, 0, 3, 0, 0,
-20, 0, 0, 0, 0, 0,
28, 0, 0, 0, 0, -2,
17, 0, 0, 0, 0, 0,
-22, 0, 0, 12, 0, 0,
-14, 0, 0, 7, 0, 0,
24, 0, 0, -11, 0, 0,
11, 0, 0, -6, 0, 0,
14, 0, 0, -6, 0, 0,
24, 0, 0, 0, 0, 0,
18, 0, 0, -8, 0, 0,
-38, 0, 0, 0, 0, 0,
-31, 0, 0, 0, 0, 0,
-16, 0, 0, 8, 0, 0,
29, 0, 0, 0, 0, 0,
-18, 0, 0, 10, 0, 0,
-10, 0, 0, 5, 0, 0,
-17, 0, 0, 10, 0, 0,
9, 0, 0, -4, 0, 0,
16, 0, 0, -6, 0, 0,
22, 0, 0, -12, 0, 0,
20, 0, 0, 0, 0, 0,
-13, 0, 0, 6, 0, 0,
-17, 0, 0, 9, 0, 0,
-14, 0, 0, 8, 0, 0,
0, 0, 0, -7, 0, 0,
14, 0, 0, 0, 0, 0,
19, 0, 0, -10, 0, 0,
-34, 0, 0, 0, 0, 0,
-20, 0, 0, 8, 0, 0,
9, 0, 0, -5, 0, 0,
-18, 0, 0, 7, 0, 0,
13, 0, 0, -6, 0, 0,
17, 0, 0, 0, 0, 0,
-12, 0, 0, 5, 0, 0,
15, 0, 0, -8, 0, 0,
-11, 0, 0, 3, 0, 0,
13, 0, 0, -5, 0, 0,
-18, 0, 0, 0, 0, 0,
-35, 0, 0, 0, 0, 0,
9, 0, 0, -4, 0, 0,
-19, 0, 0, 10, 0, 0,
-26, 0, 0, 11, 0, 0,
8, 0, 0, -4, 0, 0,
-10, 0, 0, 4, 0, 0,
10, 0, 0, -6, 0, 0,
-21, 0, 0, 9, 0, 0,
-15, 0, 0, 0, 0, 0,
9, 0, 0, -5, 0, 0,
-29, 0, 0, 0, 0, 0,
-19, 0, 0, 10, 0, 0,
12, 0, 0, -5, 0, 0,
22, 0, 0, -9, 0, 0,
-10, 0, 0, 5, 0, 0,
-20, 0, 0, 11, 0, 0,
-20, 0, 0, 0, 0, 0,
-17, 0, 0, 7, 0, 0,
15, 0, 0, -3, 0, 0,
8, 0, 0, -4, 0, 0,
14, 0, 0, 0, 0, 0,
-12, 0, 0, 6, 0, 0,
25, 0, 0, 0, 0, 0,
-13, 0, 0, 6, 0, 0,
-14, 0, 0, 8, 0, 0,
13, 0, 0, -5, 0, 0,
-17, 0, 0, 9, 0, 0,
-12, 0, 0, 6, 0, 0,
-10, 0, 0, 5, 0, 0,
10, 0, 0, -6, 0, 0,
-15, 0, 0, 0, 0, 0,
-22, 0, 0, 0, 0, 0,
28, 0, 0, -1, 0, 0,
15, 0, 0, -7, 0, 0,
23, 0, 0, -10, 0, 0,
12, 0, 0, -5, 0, 0,
29, 0, 0, -1, 0, 0,
-25, 0, 0, 1, 0, 0,
22, 0, 0, 0, 0, 0,
-18, 0, 0, 0, 0, 0,
15, 0, 0, 3, 0, 0,
-23, 0, 0, 0, 0, 0,
12, 0, 0, -5, 0, 0,
-8, 0, 0, 4, 0, 0,
-19, 0, 0, 0, 0, 0,
-10, 0, 0, 4, 0, 0,
21, 0, 0, -9, 0, 0,
23, 0, 0, -1, 0, 0,
-16, 0, 0, 8, 0, 0,
-19, 0, 0, 9, 0, 0,
-22, 0, 0, 10, 0, 0,
27, 0, 0, -1, 0, 0,
16, 0, 0, -8, 0, 0,
19, 0, 0, -8, 0, 0,
9, 0, 0, -4, 0, 0,
-9, 0, 0, 4, 0, 0,
-9, 0, 0, 4, 0, 0,
-8, 0, 0, 4, 0, 0,
18, 0, 0, -9, 0, 0,
16, 0, 0, -1, 0, 0,
-10, 0, 0, 4, 0, 0,
-23, 0, 0, 9, 0, 0,
16, 0, 0, -1, 0, 0,
-12, 0, 0, 6, 0, 0,
-8, 0, 0, 4, 0, 0,
30, 0, 0, -2, 0, 0,
24, 0, 0, -10, 0, 0,
10, 0, 0, -4, 0, 0,
-16, 0, 0, 7, 0, 0,
-16, 0, 0, 7, 0, 0,
17, 0, 0, -7, 0, 0,
-24, 0, 0, 10, 0, 0,
-12, 0, 0, 5, 0, 0,
-24, 0, 0, 11, 0, 0,
-23, 0, 0, 9, 0, 0,
-13, 0, 0, 5, 0, 0,
-15, 0, 0, 7, 0, 0,
0, 0, -1988, 0, 0, -1679,
0, 0, -63, 0, 0, -27,
-4, 0, 0, 0, 0, 0,
0, 0, 5, 0, 0, 4,
5, 0, 0, -3, 0, 0,
0, 0, 364, 0, 0, 176,
0, 0, -1044, 0, 0, -891,
-3, 0, 0, 1, 0, 0,
4, 0, 0, -2, 0, 0,
0, 0, 330, 0, 0, 0,
5, 0, 0, -2, 0, 0,
3, 0, 0, -2, 0, 0,
-3, 0, 0, 1, 0, 0,
-5, 0, 0, 2, 0, 0,
3, 0, 0, -1, 0, 0,
3, 0, 0, 0, 0, 0,
3, 0, 0, 0, 0, 0,
0, 0, 5, 0, 0, 0,
0, 0, 0, 1, 0, 0,
4, 0, 0, -2, 0, 0,
6, 0, 0, 0, 0, 0,
5, 0, 0, -2, 0, 0,
-7, 0, 0, 0, 0, 0,
-12, 0, 0, 0, 0, 0,
5, 0, 0, -3, 0, 0,
3, 0, 0, -1, 0, 0,
-5, 0, 0, 0, 0, 0,
3, 0, 0, 0, 0, 0,
-7, 0, 0, 3, 0, 0,
7, 0, 0, -4, 0, 0,
0, 0, -12, 0, 0, -10,
4, 0, 0, -2, 0, 0,
3, 0, 0, -2, 0, 0,
-3, 0, 0, 2, 0, 0,
-7, 0, 0, 3, 0, 0,
-4, 0, 0, 2, 0, 0,
-3, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0,
-3, 0, 0, 1, 0, 0,
7, 0, 0, -3, 0, 0,
-4, 0, 0, 2, 0, 0,
4, 0, 0, -2, 0, 0,
-5, 0, 0, 3, 0, 0,
5, 0, 0, 0, 0, 0,
-5, 0, 0, 2, 0, 0,
5, 0, 0, -2, 0, 0,
-8, 0, 0, 3, 0, 0,
9, 0, 0, 0, 0, 0,
6, 0, 0, -3, 0, 0,
-5, 0, 0, 2, 0, 0,
3, 0, 0, 0, 0, 0,
-7, 0, 0, 0, 0, 0,
-3, 0, 0, 1, 0, 0,
5, 0, 0, 0, 0, 0,
3, 0, 0, 0, 0, 0,
-3, 0, 0, 2, 0, 0,
4, 0, 0, -2, 0, 0,
3, 0, 0, -1, 0, 0,
-5, 0, 0, 2, 0, 0,
4, 0, 0, -2, 0, 0,
9, 0, 0, -3, 0, 0,
4, 0, 0, 0, 0, 0,
4, 0, 0, -2, 0, 0,
-3, 0, 0, 2, 0, 0,
-4, 0, 0, 2, 0, 0,
9, 0, 0, -3, 0, 0,
-4, 0, 0, 0, 0, 0,
-4, 0, 0, 0, 0, 0,
3, 0, 0, -2, 0, 0,
8, 0, 0, 0, 0, 0,
3, 0, 0, 0, 0, 0,
-3, 0, 0, 2, 0, 0,
3, 0, 0, -1, 0, 0,
3, 0, 0, -1, 0, 0,
-3, 0, 0, 1, 0, 0,
6, 0, 0, -3, 0, 0,
3, 0, 0, 0, 0, 0,
-3, 0, 0, 1, 0, 0,
-7, 0, 0, 0, 0, 0,
9, 0, 0, 0, 0, 0,
-3, 0, 0, 2, 0, 0,
-3, 0, 0, 0, 0, 0,
-4, 0, 0, 0, 0, 0,
-5, 0, 0, 3, 0, 0,
-13, 0, 0, 0, 0, 0,
-7, 0, 0, 0, 0, 0,
10, 0, 0, 0, 0, 0,
3, 0, 0, -1, 0, 0,
10, 0, 13, 6, 0, -5,
0, 0, 30, 0, 0, 14,
0, 0, -162, 0, 0, -138,
0, 0, 75, 0, 0, 0,
-7, 0, 0, 4, 0, 0,
-4, 0, 0, 2, 0, 0,
4, 0, 0, -2, 0, 0,
5, 0, 0, -2, 0, 0,
5, 0, 0, -3, 0, 0,
-3, 0, 0, 0, 0, 0,
-3, 0, 0, 2, 0, 0,
-4, 0, 0, 2, 0, 0,
-5, 0, 0, 2, 0, 0,
6, 0, 0, 0, 0, 0,
9, 0, 0, 0, 0, 0,
5, 0, 0, 0, 0, 0,
-7, 0, 0, 0, 0, 0,
-3, 0, 0, 1, 0, 0,
-4, 0, 0, 2, 0, 0,
7, 0, 0, 0, 0, 0,
-4, 0, 0, 0, 0, 0,
4, 0, 0, 0, 0, 0,
-6, 0, -3, 3, 0, 1,
0, 0, -3, 0, 0, -2,
11, 0, 0, 0, 0, 0,
3, 0, 0, -1, 0, 0,
11, 0, 0, 0, 0, 0,
-3, 0, 0, 2, 0, 0,
-1, 0, 3, 3, 0, -1,
4, 0, 0, -2, 0, 0,
0, 0, -13, 0, 0, -11,
3, 0, 6, 0, 0, 0,
-7, 0, 0, 0, 0, 0,
5, 0, 0, -3, 0, 0,
-3, 0, 0, 1, 0, 0,
3, 0, 0, 0, 0, 0,
5, 0, 0, -3, 0, 0,
-7, 0, 0, 3, 0, 0,
8, 0, 0, -3, 0, 0,
-4, 0, 0, 2, 0, 0,
11, 0, 0, 0, 0, 0,
-3, 0, 0, 1, 0, 0,
3, 0, 0, -1, 0, 0,
-4, 0, 0, 2, 0, 0,
8, 0, 0, -4, 0, 0,
3, 0, 0, -1, 0, 0,
11, 0, 0, 0, 0, 0,
-6, 0, 0, 3, 0, 0,
-4, 0, 0, 2, 0, 0,
-8, 0, 0, 4, 0, 0,
-7, 0, 0, 3, 0, 0,
-4, 0, 0, 2, 0, 0,
3, 0, 0, -1, 0, 0,
6, 0, 0, -3, 0, 0,
-6, 0, 0, 3, 0, 0,
6, 0, 0, 0, 0, 0,
6, 0, 0, -1, 0, 0,
5, 0, 0, -2, 0, 0,
-5, 0, 0, 2, 0, 0,
-4, 0, 0, 0, 0, 0,
-4, 0, 0, 2, 0, 0,
4, 0, 0, 0, 0, 0,
6, 0, 0, -3, 0, 0,
-4, 0, 0, 2, 0, 0,
0, 0, -26, 0, 0, -11,
0, 0, -10, 0, 0, -5,
5, 0, 0, -3, 0, 0,
-13, 0, 0, 0, 0, 0,
3, 0, 0, -2, 0, 0,
4, 0, 0, -2, 0, 0,
7, 0, 0, -3, 0, 0,
4, 0, 0, 0, 0, 0,
5, 0, 0, 0, 0, 0,
-3, 0, 0, 2, 0, 0,
-6, 0, 0, 2, 0, 0,
-5, 0, 0, 2, 0, 0,
-7, 0, 0, 3, 0, 0,
5, 0, 0, -2, 0, 0,
13, 0, 0, 0, 0, 0,
-4, 0, 0, 2, 0, 0,
-3, 0, 0, 0, 0, 0,
5, 0, 0, -2, 0, 0,
-11, 0, 0, 0, 0, 0,
5, 0, 0, -2, 0, 0,
4, 0, 0, 0, 0, 0,
4, 0, 0, -2, 0, 0,
-4, 0, 0, 2, 0, 0,
6, 0, 0, -3, 0, 0,
3, 0, 0, -2, 0, 0,
-12, 0, 0, 0, 0, 0,
4, 0, 0, 0, 0, 0,
-3, 0, 0, 0, 0, 0,
-4, 0, 0, 0, 0, 0,
3, 0, 0, 0, 0, 0,
3, 0, 0, -1, 0, 0,
-3, 0, 0, 1, 0, 0,
0, 0, -5, 0, 0, -2,
-7, 0, 0, 4, 0, 0,
6, 0, 0, -3, 0, 0,
-3, 0, 0, 0, 0, 0,
5, 0, 0, -3, 0, 0,
3, 0, 0, -1, 0, 0,
3, 0, 0, 0, 0, 0,
-3, 0, 0, 1, 0, 0,
-5, 0, 0, 3, 0, 0,
-3, 0, 0, 2, 0, 0,
-3, 0, 0, 2, 0, 0,
12, 0, 0, 0, 0, 0,
3, 0, 0, -1, 0, 0,
-4, 0, 0, 2, 0, 0,
4, 0, 0, 0, 0, 0,
6, 0, 0, 0, 0, 0,
5, 0, 0, -3, 0, 0,
4, 0, 0, -2, 0, 0,
-6, 0, 0, 3, 0, 0,
4, 0, 0, -2, 0, 0,
6, 0, 0, -3, 0, 0,
6, 0, 0, 0, 0, 0,
-6, 0, 0, 3, 0, 0,
3, 0, 0, -2, 0, 0,
7, 0, 0, -4, 0, 0,
4, 0, 0, -2, 0, 0,
-5, 0, 0, 2, 0, 0,
5, 0, 0, 0, 0, 0,
-6, 0, 0, 3, 0, 0,
-6, 0, 0, 3, 0, 0,
-4, 0, 0, 2, 0, 0,
10, 0, 0, 0, 0, 0,
-4, 0, 0, 2, 0, 0,
7, 0, 0, 0, 0, 0,
7, 0, 0, -3, 0, 0,
4, 0, 0, 0, 0, 0,
11, 0, 0, 0, 0, 0,
5, 0, 0, -2, 0, 0,
-6, 0, 0, 2, 0, 0,
4, 0, 0, -2, 0, 0,
3, 0, 0, -2, 0, 0,
5, 0, 0, -2, 0, 0,
-4, 0, 0, 2, 0, 0,
-4, 0, 0, 2, 0, 0,
-3, 0, 0, 2, 0, 0,
4, 0, 0, -2, 0, 0,
3, 0, 0, -1, 0, 0,
-3, 0, 0, 1, 0, 0,
-3, 0, 0, 1, 0, 0,
-3, 0, 0, 2, 0, 0
  /* eslint-enable prettier/prettier */
];

// Constants from sweph.h
var J2000 = 2451545.0; // 2000 January 1.5
var SE_TIDAL_DE406 = -25.826; // was (-25.7376) until V. 1.76.2
var SE_TIDAL_DEFAULT = SE_TIDAL_DE406;

// Ported from the swi_epsiln() function from swephlib.c
/* Obliquity of the ecliptic at Julian date J
 *
 * IAU Coefficients are from:
 * J. H. Lieske, T. Lederle, W. Fricke, and B. Morando,
 * "Expressions for the Precession Quantities Based upon the IAU
 * (1976) System of Astronomical Constants,"  Astronomy and Astrophysics
 * 58, 1-16 (1977).
 *
 * Before or after 200 years from J2000, the formula used is from:
 * J. Laskar, "Secular terms of classical planetary theories
 * using the results of general theory," Astronomy and Astrophysics
 * 157, 59070 (1986).
 *
 * Bretagnon, P. et al.: 2003, "Expressions for Precession Consistent with
 * the IAU 2000A Model". A&A 400,785
 *B03    84381.4088    -46.836051*t    -1667*10-7*t2    +199911*10-8*t3    -523*10-9*t4    -248*10-10*t5    -3*10-11*t6
 *C03   84381.406    -46.836769*t    -1831*10-7*t2    +20034*10-7*t3    -576*10-9*t4    -434*10-10*t5
 *
 *  See precess and page B18 of the Astronomical Almanac.
 */
function swi_epsiln(J) {
  var T;
  var epsiln;

  T = (J - 2451545.0) / 36525.0;
  if (PREC_IAU_1976 && Math.abs(T) <= PREC_IAU_1976_CTIES) {
    epsiln = ((((1.813e-3 * T - 5.9e-4) * T - 46.815) * T + 84381.448) * DEGTORAD) / 3600;
  } else if (PREC_IAU_2003 && Math.abs(T) <= PREC_IAU_2003_CTIES) {
    // NOTE: This is the code that will likely execute
    epsiln =
      ((((((-4.34e-8 * T - 5.76e-7) * T + 2.0034e-3) * T - 1.831e-4) * T - 46.836769) * T +
        84381.406) *
        DEGTORAD) /
      3600.0;
  } else if (PREC_BRETAGNON_2003) {
    epsiln =
      (((((((-3e-11 * T - 2.48e-8) * T - 5.23e-7) * T + 1.99911e-3) * T - 1.667e-4) * T -
        46.836051) *
        T +
        84381.4088) *
        DEGTORAD) /
      3600.0;
  } else if (PREC_SIMON_1994) {
    epsiln =
      ((((((2.5e-8 * T - 5.1e-7) * T + 1.9989e-3) * T - 1.52e-4) * T - 46.80927) * T + 84381.412) *
        DEGTORAD) /
      3600.0;
  } else if (PREC_WILLIAMS_1994) {
    epsiln =
      (((((-1.0e-6 * T + 2.0e-3) * T - 1.74e-4) * T - 46.83396) * T + 84381.409) * DEGTORAD) /
      3600.0;
  } else {
    // PREC_LASKAR_1986
    T /= 10.0;
    epsiln =
      (((((((((2.45e-10 * T + 5.79e-9) * T + 2.787e-7) * T + 7.12e-7) * T - 3.905e-5) * T -
        2.4967e-3) *
        T -
        5.138e-3) *
        T +
        1.99925) *
        T -
        0.0155) *
        T -
        468.093) *
        T +
      84381.448;
    epsiln *= DEGTORAD / 3600;
  }
  return epsiln;
}

// Ported from swe_degnorm() function from swephlib.c
// Reduce x modulo 360 degrees
function swe_degnorm(x) {
  var y;
  y = x % 360.0;
  if (Math.abs(y) < 1e-13) {
    y = 0; // Alois fix 11-dec-1999
  }
  if (y < 0.0) {
    y += 360.0;
  }
  return y;
}

// Ported from swe_radnorm() from swephlib.c
// Reduce x modulo TWOPI degrees
function swe_radnorm(x) {
  var y;
  y = x % (2 * Math.PI);
  if (Math.abs(y) < 1e-13) {
    y = 0; // Alois fix 11-dec-1999
  }
  if (y < 0.0) {
    y += 2 * Math.PI;
  }
  return y;
}

// Ported from swi_nutation() function from swephlib.c
// NOTE: Only uses the NUT_IAU_2000B logic. The NUT_IAU_2000A code has been removed

/* Nutation IAU 2000A model
 * (MHB2000 luni-solar and planetary nutation, without free core nutation)
 *
 * Function returns nutation in longitude and obliquity in radians with
 * respect to the equinox of date. For the obliquity of the ecliptic
 * the calculation of Lieske & al. (1977) must be used.
 *
 * The precision in recent years is about 0.001 arc seconds.
 *
 * The calculation includes luni-solar and planetary nutation.
 * Free core nutation, which cannot be predicted, is omitted,
 * the error being of the order of a few 0.0001 arc seconds.
 *
 * References:
 *
 * Capitaine, N., Wallace, P.T., Chapront, J., A & A 432, 366 (2005).
 *
 * Chapront, J., Chapront-Touze, M. & Francou, G., A & A 387, 700 (2002).
 *
 * Lieske, J.H., Lederle, T., Fricke, W. & Morando, B., "Expressions
 * for the precession quantities based upon the IAU (1976) System of
 * Astronomical Constants", A & A 58, 1-16 (1977).
 *
 * Mathews, P.M., Herring, T.A., Buffet, B.A., "Modeling of nutation
 * and precession   New nutation series for nonrigid Earth and
 * insights into the Earth's interior", J.Geophys.Res., 107, B4,
 * 2002.
 *
 * Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,
 * Francou, G., Laskar, J., A & A 282, 663-683 (1994).
 *
 * Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M., A & A Supp.
 * Ser. 135, 111 (1999).
 *
 * Wallace, P.T., "Software for Implementing the IAU 2000
 * Resolutions", in IERS Workshop 5.1 (2002).
 *
 * Nutation IAU 2000A series in:
 * Kaplan, G.H., United States Naval Observatory Circular No. 179 (Oct. 2005)
 * aa.usno.navy.mil/publications/docs/Circular_179.html
 *
 * MHB2000 code at
 * - ftp://maia.usno.navy.mil/conv2000/chapter5/IAU2000A.
 * - http://www.iau-sofa.rl.ac.uk/2005_0901/Downloads.html
 */

function swi_nutation(J) {
  var i, j, k, inls;
  var M, SM, F, D, OM;
  var darg, sinarg, cosarg;
  var dpsi = 0;
  var deps = 0;
  var T = (J - J2000) / 36525.0;
  // luni-solar nutation
  // Fundamental arguments, Simon & al. (1994)
  // Mean anomaly of the Moon.
  M =
    swe_degnorm(
      (485868.249036 + T * (1717915923.2178 + T * (31.8792 + T * (0.051635 + T * -0.0002447)))) /
        3600.0
    ) * DEGTORAD;
  // Mean anomaly of the Sun
  SM =
    swe_degnorm(
      (1287104.79305 + T * (129596581.0481 + T * (-0.5532 + T * (0.000136 + T * -0.00001149)))) /
        3600.0
    ) * DEGTORAD;
  // Mean argument of the latitude of the Moon.
  F =
    swe_degnorm(
      (335779.526232 + T * (1739527262.8478 + T * (-12.7512 + T * (-0.001037 + T * 0.00000417)))) /
        3600.0
    ) * DEGTORAD;
  // Mean elongation of the Moon from the Sun.
  D =
    swe_degnorm(
      (1072260.70369 + T * (1602961601.209 + T * (-6.3706 + T * (0.006593 + T * -0.00003169)))) /
        3600.0
    ) * DEGTORAD;
  // Mean longitude of the ascending node of the Moon.
  OM =
    swe_degnorm(
      (450160.398036 + T * (-6962890.5431 + T * (7.4722 + T * (0.007702 + T * -0.00005939)))) /
        3600.0
    ) * DEGTORAD;
  // luni-solar nutation series, in reverse order, starting with small terms
  inls = NLS_2000B;
  for (i = inls - 1; i >= 0; i--) {
    j = i * 5;
    darg = swe_radnorm(
      nls[j + 0] * M + nls[j + 1] * SM + nls[j + 2] * F + nls[j + 3] * D + nls[j + 4] * OM
    );
    sinarg = Math.sin(darg);
    cosarg = Math.cos(darg);
    k = i * 6;
    dpsi += (cls[k + 0] + cls[k + 1] * T) * sinarg + cls[k + 2] * cosarg;
    deps += (cls[k + 3] + cls[k + 4] * T) * cosarg + cls[k + 5] * sinarg;
  }
  nutlo[0] = dpsi * O1MAS2DEG;
  nutlo[1] = deps * O1MAS2DEG;
  nutlo[0] *= DEGTORAD;
  nutlo[1] *= DEGTORAD;
}

// Constants from swephlib.c
var TABEND = 2017;
var TABSTART = 1620;
// var TAB2_END = 1600;
// var TAB2_STEP = 100;
// var TAB2_START = -1000;
// var ESPENAK_MEEUS_2006 = true;
var TABSIZ = TABEND - TABSTART + 1;
var tid_acc = SE_TIDAL_DEFAULT;
/* DeltaT = Ephemeris Time - Universal Time, in days.
 *
 * 1620 - today + a couple of years:
 * ---------------------------------
 * The tabulated values of deltaT, in hundredths of a second,
 * were taken from The Astronomical Almanac 1997, page K8.  The program
 * adjusts for a value of secular tidal acceleration ndot = -25.7376.
 * arcsec per century squared, the value used in JPL's DE403 ephemeris.
 * ELP2000 (and DE200) used the value -23.8946.
 * To change ndot, one can
 * either redefine SE_TIDAL_DEFAULT in swephexp.h
 * or use the routine swe_set_tid_acc() before calling Swiss
 * Ephemeris.
 * Bessel's interpolation formula is implemented to obtain fourth
 * order interpolated values at intermediate times.
 *
 * -1000 - 1620:
 * ---------------------------------
 * For dates between -500 and 1600, the table given by Morrison &
 * Stephenson (2004; p. 332) is used, with linear interpolation.
 * This table is based on an assumed value of ndot = -26.
 * The program adjusts for ndot = -25.7376.
 * For 1600 - 1620, a linear interpolation between the last value
 * of the latter and the first value of the former table is made.
 *
 * before -1000:
 * ---------------------------------
 * For times before -1100, a formula of Morrison & Stephenson (2004)
 * (p. 332) is used:
 * dt = 32 * t * t - 20 sec, where t is centuries from 1820 AD.
 * For -1100 to -1000, a transition from this formula to the Stephenson
 * table has been implemented in order to avoid a jump.
 *
 * future:
 * ---------------------------------
 * For the time after the last tabulated value, we use the formula
 * of Stephenson (1997; p. 507), with a modification that avoids a jump
 * at the end of the tabulated period. A linear term is added that
 * makes a slow transition from the table to the formula over a period
 * of 100 years. (Need not be updated, when table will be enlarged.)
 *
 * References:
 *
 * Stephenson, F. R., and L. V. Morrison, "Long-term changes
 * in the rotation of the Earth: 700 B.C. to A.D. 1980,"
 * Philosophical Transactions of the Royal Society of London
 * Series A 313, 47-70 (1984)
 *
 * Borkowski, K. M., "ELP2000-85 and the Dynamical Time
 * - Universal Time relation," Astronomy and Astrophysics
 * 205, L8-L10 (1988)
 * Borkowski's formula is derived from partly doubtful eclipses
 * going back to 2137 BC and uses lunar position based on tidal
 * coefficient of -23.9 arcsec/cy^2.
 *
 * Chapront-Touze, Michelle, and Jean Chapront, _Lunar Tables
 * and Programs from 4000 B.C. to A.D. 8000_, Willmann-Bell 1991
 * Their table agrees with the one here, but the entries are
 * rounded to the nearest whole second.
 *
 * Stephenson, F. R., and M. A. Houlden, _Atlas of Historical
 * Eclipse Maps_, Cambridge U. Press (1986)
 *
 * Stephenson, F.R. & Morrison, L.V., "Long-Term Fluctuations in
 * the Earth's Rotation: 700 BC to AD 1990", Philosophical
 * Transactions of the Royal Society of London,
 * Ser. A, 351 (1995), 165-202.
 *
 * Stephenson, F. Richard, _Historical Eclipses and Earth's
 * Rotation_, Cambridge U. Press (1997)
 *
 * Morrison, L. V., and F.R. Stephenson, "Historical Values of the Earth's
 * Clock Error DT and the Calculation of Eclipses", JHA xxxv (2004),
 * pp.327-336
 *
 * Table from AA for 1620 through today
 * Note, Stephenson and Morrison's table starts at the year 1630.
 * The Chapronts' table does not agree with the Almanac prior to 1630.
 * The actual accuracy decreases rapidly prior to 1780.
 *
 * Jean Meeus, Astronomical Algorithms, 2nd edition, 1998.
 *
 * For a comprehensive collection of publications and formulae, see:
 * http://www.phys.uu.nl/~vgent/deltat/deltat_modern.htm
 * http://www.phys.uu.nl/~vgent/deltat/deltat_old.htm
 *
 * For future values of delta t, the following data from the
 * Earth Orientation Department of the US Naval Observatory can be used:
 * (TAI-UTC) from: ftp://maia.usno.navy.mil/ser7/tai-utc.dat
 * (UT1-UTC) from: ftp://maia.usno.navy.mil/ser7/finals.all
 * file description in: ftp://maia.usno.navy.mil/ser7/readme.finals
 * Delta T = TAI-UT1 + 32.184 sec = (TAI-UTC) - (UT1-UTC) + 32.184 sec
 *
 * Also, there is the following file:
 * http://maia.usno.navy.mil/ser7/deltat.data, but it is about 3 months
 * behind (on 3 feb 2009)
 *
 * Last update of table dt[]: Dieter Koch, 27 april 2010.
 * ATTENTION: Whenever updating this table, do not forget to adjust
 * the macros TABEND and TABSIZ !
 */

/* we make the table greater for additional values read from external file */
//var TABSIZ_SPACE = TABSIZ+100; // Variable isn't used

var dt = [
  /* eslint-disable prettier/prettier */
  /* 1620.0 thru 1659.0 */
  124.00, 119.00, 115.00, 110.00, 106.00, 102.00, 98.00, 95.00, 91.00, 88.00,
  85.00, 82.00, 79.00, 77.00, 74.00, 72.00, 70.00, 67.00, 65.00, 63.00,
  62.00, 60.00, 58.00, 57.00, 55.00, 54.00, 53.00, 51.00, 50.00, 49.00,
  48.00, 47.00, 46.00, 45.00, 44.00, 43.00, 42.00, 41.00, 40.00, 38.00,
  /* 1660.0 thru 1699.0 */
  37.00, 36.00, 35.00, 34.00, 33.00, 32.00, 31.00, 30.00, 28.00, 27.00,
  26.00, 25.00, 24.00, 23.00, 22.00, 21.00, 20.00, 19.00, 18.00, 17.00,
  16.00, 15.00, 14.00, 14.00, 13.00, 12.00, 12.00, 11.00, 11.00, 10.00,
  10.00, 10.00, 9.00, 9.00, 9.00, 9.00, 9.00, 9.00, 9.00, 9.00,
  /* 1700.0 thru 1739.0 */
  9.00, 9.00, 9.00, 9.00, 9.00, 9.00, 9.00, 9.00, 10.00, 10.00,
  10.00, 10.00, 10.00, 10.00, 10.00, 10.00, 10.00, 11.00, 11.00, 11.00,
  11.00, 11.00, 11.00, 11.00, 11.00, 11.00, 11.00, 11.00, 11.00, 11.00,
  11.00, 11.00, 11.00, 11.00, 12.00, 12.00, 12.00, 12.00, 12.00, 12.00,
  /* 1740.0 thru 1779.0 */
  12.00, 12.00, 12.00, 12.00, 13.00, 13.00, 13.00, 13.00, 13.00, 13.00,
  13.00, 14.00, 14.00, 14.00, 14.00, 14.00, 14.00, 14.00, 15.00, 15.00,
  15.00, 15.00, 15.00, 15.00, 15.00, 16.00, 16.00, 16.00, 16.00, 16.00,
  16.00, 16.00, 16.00, 16.00, 16.00, 17.00, 17.00, 17.00, 17.00, 17.00,
  /* 1780.0 thru 1799.0 */
  17.00, 17.00, 17.00, 17.00, 17.00, 17.00, 17.00, 17.00, 17.00, 17.00,
  17.00, 17.00, 16.00, 16.00, 16.00, 16.00, 15.00, 15.00, 14.00, 14.00,
  /* 1800.0 thru 1819.0 */
  13.70, 13.40, 13.10, 12.90, 12.70, 12.60, 12.50, 12.50, 12.50, 12.50,
  12.50, 12.50, 12.50, 12.50, 12.50, 12.50, 12.50, 12.40, 12.30, 12.20,
  /* 1820.0 thru 1859.0 */
  12.00, 11.70, 11.40, 11.10, 10.60, 10.20, 9.60, 9.10, 8.60, 8.00,
  7.50, 7.00, 6.60, 6.30, 6.00, 5.80, 5.70, 5.60, 5.60, 5.60,
  5.70, 5.80, 5.90, 6.10, 6.20, 6.30, 6.50, 6.60, 6.80, 6.90,
  7.10, 7.20, 7.30, 7.40, 7.50, 7.60, 7.70, 7.70, 7.80, 7.80,
  /* 1860.0 thru 1899.0 */
  7.88, 7.82, 7.54, 6.97, 6.40, 6.02, 5.41, 4.10, 2.92, 1.82,
  1.61, .10, -1.02, -1.28, -2.69, -3.24, -3.64, -4.54, -4.71, -5.11,
  -5.40, -5.42, -5.20, -5.46, -5.46, -5.79, -5.63, -5.64, -5.80, -5.66,
  -5.87, -6.01, -6.19, -6.64, -6.44, -6.47, -6.09, -5.76, -4.66, -3.74,
  /* 1900.0 thru 1939.0 */
  -2.72, -1.54, -.02, 1.24, 2.64, 3.86, 5.37, 6.14, 7.75, 9.13,
  10.46, 11.53, 13.36, 14.65, 16.01, 17.20, 18.24, 19.06, 20.25, 20.95,
  21.16, 22.25, 22.41, 23.03, 23.49, 23.62, 23.86, 24.49, 24.34, 24.08,
  24.02, 24.00, 23.87, 23.95, 23.86, 23.93, 23.73, 23.92, 23.96, 24.02,
  /* 1940.0 thru 1979.0 */
  24.33, 24.83, 25.30, 25.70, 26.24, 26.77, 27.28, 27.78, 28.25, 28.71,
  29.15, 29.57, 29.97, 30.36, 30.72, 31.07, 31.35, 31.68, 32.18, 32.68,
  33.15, 33.59, 34.00, 34.47, 35.03, 35.73, 36.54, 37.43, 38.29, 39.20,
  40.18, 41.17, 42.23, 43.37, 44.49, 45.48, 46.46, 47.52, 48.53, 49.59,
  /* 1980.0 thru 1999.0 */
  50.54, 51.38, 52.17, 52.96, 53.79, 54.34, 54.87, 55.32, 55.82, 56.30,
  56.86, 57.57, 58.31, 59.12, 59.98, 60.78, 61.63, 62.30, 62.97, 63.47,
  /* 2000.0 thru 2009.0 */
  63.83, 64.09, 64.30, 64.47, 64.57, 64.69, 64.85, 65.15, 65.46, 65.78,
  /* 2010.0 thru 2019.0 */
  66.07, 66.32,
  /* Extrapolated values, 2011 - 2014 */
  67.00, 67.50, 68.00, 68.50, 69.00, 69.50
  /* eslint-enable prettier/prettier */
];

// Port of swe_deltat() from swephlib.c
// returns DeltaT (ET - UT) in days
// tjd   =   julian day in UT
function swe_deltat(tjd) {
  var ans = 0;
  var Y;
  // var B, Ygreg, dd;
  // var iy;
  // read additional values from swedelta.txt
  // var use_espenak_meeus = ESPENAK_MEEUS_2006; // Not used
  Y = 2000.0 + (tjd - J2000) / 365.25;

  // COMMENTING THIS SECTION OUT. UNCOMMENT for Dates < 1620
  /*
  Ygreg = 2000.0 + (tjd - J2000)/365.2425;
  
  // Before 1633 AD, if the macro ESPENAK_MEEUS_2006 is TRUE:
  // Polynomials by Espenak & Meeus 2006, derived from Stephenson & Morrison
  // 2004.
  // Note, Espenak & Meeus use their formulae only from 2000 BC on.
  // However, they use the long-term formula of Morrison & Stephenson,
  // which can be used even for the remoter past.
  if (use_espenak_meeus && tjd < 2317746.13090277789) {
      return deltat_espenak_meeus_1620(tjd);
  }
  // If the macro ESPENAK_MEEUS_2006 is FALSE:
  // Before 1620, we follow Stephenson & Morrsion 2004. For the tabulated
  // values 1000 BC through 1600 AD, we use linear interpolation.
  if (Y < TABSTART) {
      if (Y < TAB2_END) {
          return deltat_stephenson_morrison_1600(tjd);
      } else {
          // between 1600 and 1620:
          // linear interpolation between
          // end of table dt2 and start of table dt
          if (Y >= TAB2_END) {
              B = TABSTART - TAB2_END;
              iy = (TAB2_END - TAB2_START) / TAB2_STEP;
              dd = (Y - TAB2_END) / B;
              // ans = dt2[iy] + dd * (dt[0] / 100.0 - dt2[iy]);
              ans = dt2[iy] + dd * (dt[0] - dt2[iy]);
              ans = adjust_for_tidacc(ans, Ygreg);
              return ans / 86400.0;
          }
      }
  }
  */

  // NOTE: MOST OF THE YEARS WILL USE THIS LOGIC. Year > 1620
  // 1620 - today + a few years (tabend):
  // Besselian interpolation from tabulated values in table dt.
  // See AA page K11.
  if (Y >= TABSTART) {
    return deltat_aa(tjd);
  }
  return ans / 86400.0;
}

// Ported deltat_aa() function from swephlib.c
function deltat_aa(tjd) {
  var ans = 0;
  var ans2;
  var ans3;
  var p, B, B2, Y, dd;
  var d = Array();
  var i, iy, k;
  var continueCalculation = true;
  // var tabsiz = init_dt(); // Removed this function because there is no swedelta.txt file
  var tabsiz = TABSIZ; // Set the tabsiz to default of 398 since there is no init_dt() & swedelta.txt
  var tabend = TABSTART + tabsiz - 1;
  Y = 2000.0 + (tjd - J2000) / 365.2425;

  if (Y <= tabend) {
    // Index into the table.
    p = Math.floor(Y);
    iy = p - TABSTART;
    // Zeroth order estimate is value at start of year
    ans = dt[iy];
    k = iy + 1;
    if (k >= tabsiz) {
      continueCalculation = false; // No data, can't go on.
    }

    if (continueCalculation) {
      // The fraction of tabulation interval
      p = Y - p;
      // First order interpolated value
      ans += p * (dt[k] - dt[iy]);
      if (iy - 1 < 0 || iy + 2 >= tabsiz) {
        continueCalculation = false; // can't do second differences
      }
    }
    if (continueCalculation) {
      // Make table of first differences
      k = iy - 2;
      for (i = 0; i < 5; i++) {
        if (k < 0 || k + 1 >= tabsiz) {
          d[i] = 0;
        } else {
          d[i] = dt[k + 1] - dt[k];
        }
        k += 1;
      }

      // Compute second differences
      for (i = 0; i < 4; i++) {
        d[i] = d[i + 1] - d[i];
      }
      B = 0.25 * p * (p - 1.0);
      ans += B * (d[1] + d[2]);
      if (iy + 2 >= tabsiz) {
        continueCalculation = false;
      }
    }
    if (continueCalculation) {
      // Compute third differences
      for (i = 0; i < 3; i++) {
        d[i] = d[i + 1] - d[i];
      }
      B = (2.0 * B) / 3.0;
      ans += (p - 0.5) * B * d[1];

      if (iy - 2 < 0 || iy + 3 > tabsiz) {
        continueCalculation = false;
      }
    }
    if (continueCalculation) {
      // Compute fourth differences
      for (i = 0; i < 2; i++) {
        d[i] = d[i + 1] - d[i];
      }
      B = 0.125 * B * (p + 1.0) * (p - 2.0);
      ans += B * (d[0] + d[1]);
    }
    ans = adjust_for_tidacc(ans, Y);
    return ans / 86400.0;
  }
  // today - :
  // Formula Stephenson (1997; p. 507),
  // with modification to avoid jump at end of AA table,
  // similar to what Meeus 1998 had suggested.
  // Slow transition within 100 years.
  B = 0.01 * (Y - 1820);
  ans = -20 + 31 * B * B;
  // slow transition from tabulated values to Stephenson formula:
  if (Y <= tabend + 100) {
    B2 = 0.01 * (tabend - 1820);
    ans2 = -20 + 31 * B2 * B2;
    ans3 = dt[tabsiz - 1];
    dd = ans2 - ans3;
    ans += dd * (Y - (tabend + 100)) * 0.01;
  }
  return ans / 86400.0;
}

// Ported adjust_for_tidacc() function from swephlib.c
/* Astronomical Almanac table is corrected by adding the expression
 *     -0.000091 (ndot + 26)(year-1955)^2  seconds
 * to entries prior to 1955 (AA page K8), where ndot is the secular
 * tidal term in the mean motion of the Moon.
 *
 * Entries after 1955 are referred to atomic time standards and
 * are not affected by errors in Lunar or planetary theory.
 */
function adjust_for_tidacc(ans, Y) {
  var B;
  if (Y < 1955.0) {
    B = Y - 1955.0;
    ans += -0.000091 * (tid_acc + 26.0) * B * B;
  }
  return ans;
}

// Ported from swe_sidtime0() from swephlib.c

/* Apparent Sidereal Time at Greenwich with equation of the equinoxes
 * AA page B6
 *
 * returns sidereal time in hours.
 *
 * Caution. At epoch J2000.0, the 16 decimal precision
 * of IEEE double precision numbers
 * limits time resolution measured by Julian date
 * to approximately 24 microseconds.
 *
 * program returns sidereal hours since sidereal midnight
 * tjd     julian day UT
 * eps     obliquity of ecliptic, degrees
 * nut     nutation, degrees
 */
function swe_sidtime0(tjd, eps, nut) {
  var jd0; // Julian day at midnight Universal Time
  var secs; // Time of day, UT seconds since UT midnight
  var eqeq, jd, tu, tt, msday;
  var gmst;

  // Julian day at given UT
  jd = tjd;
  jd0 = Math.floor(jd);
  secs = tjd - jd0;
  if (secs < 0.5) {
    jd0 -= 0.5;
    secs += 0.5;
  } else {
    jd0 += 0.5;
    secs -= 0.5;
  }
  secs *= 86400.0;
  tu = (jd0 - J2000) / 36525.0; // UT1 in centuries after J2000
  if (PREC_IAU_2003) {
    tt = (jd0 + swe_deltat(jd0) - J2000) / 36525.0; // TT in centuries after J2000
    gmst =
      (((-0.000000002454 * tt - 0.00000199708) * tt - 0.0000002926) * tt + 0.09277211) * tt * tt +
      307.4771013 * (tt - tu) +
      8640184.79447825 * tu +
      24110.5493771;
    // mean solar days per sidereal day at date tu;
    // for the derivative of gmst, we can assume UT1 =~ TT
    msday =
      1 +
      ((((-0.00000001227 * tt - 0.00000798832) * tt - 0.0000008778) * tt + 0.18554422) * tt +
        8640184.79447825) /
        (86400 * 36525);
  } else {
    // Greenwich Mean Sidereal Time at 0h UT of date
    gmst = ((-6.2e-6 * tu + 9.3104e-2) * tu + 8640184.812866) * tu + 24110.54841;
    // mean solar days per sidereal day at date tu, = 1.00273790934 in 1986
    msday = 1.0 + ((-1.86e-5 * tu + 0.186208) * tu + 8640184.812866) / (86400 * 36525);
  }
  // Local apparent sidereal time at given UT at Greenwich
  eqeq = 240.0 * nut * Math.cos(eps * DEGTORAD);
  gmst = gmst + msday * secs + eqeq; // + 240.0*tlong
  // Sidereal seconds modulo 1 sidereal day
  gmst = gmst - 86400.0 * Math.floor(gmst / 86400.0);
  // return in hours
  gmst /= 3600;
  return gmst;
}

// Ported swe_houses_armc() function from swehouse.c
/*
 * this function is required for very special computations
 * where no date is given for house calculation,
 * e.g. for composite charts or progressive charts.
 * cusps are returned in double cusp[13],
 *                           or cusp[37] with house system 'G'.
 * cusp[1...12]  houses 1 - 12
 */
function swe_houses_armc(armc, geolat, eps, hsys) {
  // var i, retc = 0;
  // var cusp = Array();
  // var ito;
  // if (hsys == 'G') {
  //   ito = 36;
  // } else {
  //   ito = 12;
  // }
  armc = swe_degnorm(armc);
  retc = CalcH(armc, geolat, eps, hsys, 2);
}

// Define the houses structure as specified in swehouse.h
var hsp = {
  cusp: Array(),
  ac: 0,
  mc: 0,
  vertex: 0,
  equasc: 0,
  coasc1: 0,
  coasc2: 0,
  polasc: 0
};

// Ported CalcH() function from swehouse.c
/* *********************************************************
 *  Arguments: th = sidereal time (angle 0..360 degrees
 *             hsy = letter code for house system;
 *                   K  Koch
 *                   O  Porphyry
 *                   P  Placidus
 *                   W  equal, whole sign
 *                   A  equal // Not Implemented
 *                   E  equal // Not Implemented
 *                   B  Alcabitius // Not Implemented
 *                   C  Campanus // Not Implemented
 *                   H  horizon / azimut // Not Implemented
 *                   R  Regiomontanus // Not Implemented
 *                   V  equal Vehlow // Not Implemented
 *                   X  axial rotation system/ Meridian houses // Not Implemented
 *                   G  36 Gauquelin sectors // Not Implemented
 *                   U  Krusinski-Pisa // Not Implemented
 *             fi = geographic latitude
 *             ekl = obliquity of the ecliptic
 *             iteration_count = number of iterations in
 *             Placidus calculation; can be 1 or 2.
 * *********************************************************
 *  Koch and Placidus don't work in the polar circle.
 *  We swap MC/IC so that MC is always before AC in the zodiac
 *  We than divide the quadrants into 3 equal parts.
 * *********************************************************
 *  All angles are expressed in degrees.
 *  Special trigonometric functions sind, cosd etc. are
 *  implemented for arguments in degrees.
 ***********************************************************/
function CalcH(th, fi, ekl, hsy, iteration_count) {
  var tane, tanfi, tant, sina, cosa, th2;
  var a, c, f, fh1, fh2, rectasc, ad3, acmc, vemc;
  var i;
  // var cosfi, xh1, xh2, ih, ih2;
  var sine, cose;
  // var x = Array();
  cose = cosd(ekl);
  sine = sind(ekl);
  tane = tand(ekl);
  // north and south poles
  if (Math.abs(Math.abs(fi) - 90) < VERY_SMALL) {
    if (fi < 0) {
      fi = -90 + VERY_SMALL;
    } else {
      fi = 90 - VERY_SMALL;
    }
  }
  tanfi = tand(fi);
  // mc
  if (Math.abs(th - 90) > VERY_SMALL && Math.abs(th - 270) > VERY_SMALL) {
    tant = tand(th);
    hsp.mc = atand(tant / cose);
    if (th > 90 && th <= 270) {
      hsp.mc = swe_degnorm(hsp.mc + 180);
    }
  } else {
    if (Math.abs(th - 90) <= VERY_SMALL) {
      hsp.mc = 90;
    } else {
      hsp.mc = 270;
    }
  } // if
  hsp.mc = swe_degnorm(hsp.mc);
  // ascendant
  hsp.ac = Asc1(th + 90, fi, sine, cose);
  hsp.cusp[1] = hsp.ac;
  hsp.cusp[10] = hsp.mc;

  // Koch houses
  if (hsy == 'K') {
    if (Math.abs(fi) >= 90 - ekl) {
      // within polar circle
      retc = -1; // ERR;
      // goto porphyry; // TODO: Rerun the House calculations with Porphyry
    }
    sina = (sind(hsp.mc) * sine) / cosd(fi);
    if (sina > 1) {
      sina = 1;
    }
    if (sina < -1) {
      sina = -1;
    }
    cosa = Math.sqrt(1 - sina * sina); // always >> 0
    c = atand(tanfi / cosa);
    ad3 = asind(sind(c) * sina) / 3.0;
    hsp.cusp[11] = Asc1(th + 30 - 2 * ad3, fi, sine, cose);
    hsp.cusp[12] = Asc1(th + 60 - ad3, fi, sine, cose);
    hsp.cusp[2] = Asc1(th + 120 + ad3, fi, sine, cose);
    hsp.cusp[3] = Asc1(th + 150 + 2 * ad3, fi, sine, cose);
  }

  // Porphyry houses
  if (hsy == 'O') {
    // within polar circle we swap AC/DC if AC is on wrong side
    acmc = swe_difdeg2n(hsp.ac, hsp.mc);
    if (acmc < 0) {
      hsp.ac = swe_degnorm(hsp.ac + 180);
      hsp.cusp[1] = hsp.ac;
      acmc = swe_difdeg2n(hsp.ac, hsp.mc);
    }
    hsp.cusp[2] = swe_degnorm(hsp.ac + (180 - acmc) / 3);
    hsp.cusp[3] = swe_degnorm(hsp.ac + ((180 - acmc) / 3) * 2);
    hsp.cusp[11] = swe_degnorm(hsp.mc + acmc / 3);
    hsp.cusp[12] = swe_degnorm(hsp.mc + (acmc / 3) * 2);
  }

  // Equal, Whole-Sign houses
  if (hsy == 'W') {
    // within polar circle we swap AC/DC if AC is on wrong side
    acmc = swe_difdeg2n(hsp.ac, hsp.mc);
    if (acmc < 0) {
      hsp.ac = swe_degnorm(hsp.ac + 180);
      hsp.cusp[1] = hsp.ac;
    }
    hsp.cusp[1] = hsp.ac - (hsp.ac % 30);
    for (i = 2; i <= 12; i++) {
      hsp.cusp[i] = swe_degnorm(hsp.cusp[1] + (i - 1) * 30);
    }
  }

  // Placidus houses
  if (hsy == 'P') {
    if (Math.abs(fi) >= 90 - ekl) {
      // within polar circle
      retc = -1; // ERR;
      // goto porphyry; // TODO: Rerun the House calculations with Porphyry
    }
    a = asind(tand(fi) * tane);
    fh1 = atand(sind(a / 3) / tane);
    fh2 = atand(sind((a * 2) / 3) / tane);
    // ************  house 11 ********************
    rectasc = swe_degnorm(30 + th);
    tant = tand(asind(sine * sind(Asc1(rectasc, fh1, sine, cose))));
    if (Math.abs(tant) < VERY_SMALL) {
      hsp.cusp[11] = rectasc;
    } else {
      // pole height
      f = atand(sind(asind(tanfi * tant) / 3) / tant);
      hsp.cusp[11] = Asc1(rectasc, f, sine, cose);
      for (i = 1; i <= iteration_count; i++) {
        tant = tand(asind(sine * sind(hsp.cusp[11])));
        if (Math.abs(tant) < VERY_SMALL) {
          hsp.cusp[11] = rectasc;
          break;
        }
        // pole height
        f = atand(sind(asind(tanfi * tant) / 3) / tant);
        hsp.cusp[11] = Asc1(rectasc, f, sine, cose);
      }
    }
    // ************  house 12 ********************
    rectasc = swe_degnorm(60 + th);
    tant = tand(asind(sine * sind(Asc1(rectasc, fh2, sine, cose))));
    if (Math.abs(tant) < VERY_SMALL) {
      hsp.cusp[12] = rectasc;
    } else {
      f = atand(sind(asind(tanfi * tant) / 1.5) / tant);
      //  pole height
      hsp.cusp[12] = Asc1(rectasc, f, sine, cose);
      for (i = 1; i <= iteration_count; i++) {
        tant = tand(asind(sine * sind(hsp.cusp[12])));
        if (Math.abs(tant) < VERY_SMALL) {
          hsp.cusp[12] = rectasc;
          break;
        }
        f = atand(sind(asind(tanfi * tant) / 1.5) / tant);
        //  pole height
        hsp.cusp[12] = Asc1(rectasc, f, sine, cose);
      }
    }
    // ************  house  2 ********************
    rectasc = swe_degnorm(120 + th);
    tant = tand(asind(sine * sind(Asc1(rectasc, fh2, sine, cose))));
    if (Math.abs(tant) < VERY_SMALL) {
      hsp.cusp[2] = rectasc;
    } else {
      f = atand(sind(asind(tanfi * tant) / 1.5) / tant);
      //  pole height
      hsp.cusp[2] = Asc1(rectasc, f, sine, cose);
      for (i = 1; i <= iteration_count; i++) {
        tant = tand(asind(sine * sind(hsp.cusp[2])));
        if (Math.abs(tant) < VERY_SMALL) {
          hsp.cusp[2] = rectasc;
          break;
        }
        f = atand(sind(asind(tanfi * tant) / 1.5) / tant);
        //  pole height
        hsp.cusp[2] = Asc1(rectasc, f, sine, cose);
      }
    }
    // ************  house  3 ********************
    rectasc = swe_degnorm(150 + th);
    tant = tand(asind(sine * sind(Asc1(rectasc, fh1, sine, cose))));
    if (Math.abs(tant) < VERY_SMALL) {
      hsp.cusp[3] = rectasc;
    } else {
      f = atand(sind(asind(tanfi * tant) / 3) / tant);
      //  pole height
      hsp.cusp[3] = Asc1(rectasc, f, sine, cose);
      for (i = 1; i <= iteration_count; i++) {
        tant = tand(asind(sine * sind(hsp.cusp[3])));
        if (Math.abs(tant) < VERY_SMALL) {
          hsp.cusp[3] = rectasc;
          break;
        }
        f = atand(sind(asind(tanfi * tant) / 3) / tant);
        //  pole height
        hsp.cusp[3] = Asc1(rectasc, f, sine, cose);
      }
    }
  }

  hsp.cusp[4] = swe_degnorm(hsp.cusp[10] + 180);
  hsp.cusp[5] = swe_degnorm(hsp.cusp[11] + 180);
  hsp.cusp[6] = swe_degnorm(hsp.cusp[12] + 180);
  hsp.cusp[7] = swe_degnorm(hsp.cusp[1] + 180);
  hsp.cusp[8] = swe_degnorm(hsp.cusp[2] + 180);
  hsp.cusp[9] = swe_degnorm(hsp.cusp[3] + 180);

  // vertex
  if (fi >= 0) {
    f = 90 - fi;
  } else {
    f = -90 - fi;
  }
  hsp.vertex = Asc1(th - 90, f, sine, cose);
  // with tropical latitudes, the vertex behaves strange,
  // in a similar way as the ascendant within the polar
  // circle. we keep it always on the western hemisphere.
  if (Math.abs(fi) <= ekl) {
    vemc = swe_difdeg2n(hsp.vertex, hsp.mc);
    if (vemc > 0) {
      hsp.vertex = swe_degnorm(hsp.vertex + 180);
    }
  }
  // some strange points:
  // equasc (equatorial ascendant)
  th2 = swe_degnorm(th + 90);
  if (Math.abs(th2 - 90) > VERY_SMALL && Math.abs(th2 - 270) > VERY_SMALL) {
    tant = tand(th2);
    hsp.equasc = atand(tant / cose);
    if (th2 > 90 && th2 <= 270) {
      hsp.equasc = swe_degnorm(hsp.equasc + 180);
    }
  } else {
    if (Math.abs(th2 - 90) <= VERY_SMALL) {
      hsp.equasc = 90;
    } else {
      hsp.equasc = 270;
    }
  } //  if
  hsp.equasc = swe_degnorm(hsp.equasc);
  // "co-ascendant" W. Koch
  hsp.coasc1 = swe_degnorm(Asc1(th - 90, fi, sine, cose) + 180);
  // "co-ascendant" M. Munkasey
  if (fi >= 0) {
    hsp.coasc2 = Asc1(th + 90, 90 - fi, sine, cose);
  } else {
    // southern hemisphere
    hsp.coasc2 = Asc1(th + 90, -90 - fi, sine, cose);
  }
  // "polar ascendant" M. Munkasey
  hsp.polasc = Asc1(th - 90, fi, sine, cose);
}

// Ported swe_difdeg2n() function from swephlib.c
function swe_difdeg2n(p1, p2) {
  var dif;
  dif = swe_degnorm(p1 - p2);
  if (dif >= 180.0) {
    return dif - 360.0;
  }
  return dif;
}

// Ported Asc1() function from swehouse.c
function Asc1(x1, f, sine, cose) {
  var n;
  var ass;
  x1 = swe_degnorm(x1);
  n = Math.floor(x1 / 90 + 1);
  if (n == 1) {
    ass = Asc2(x1, f, sine, cose);
  } else if (n == 2) {
    ass = 180 - Asc2(180 - x1, -f, sine, cose);
  } else if (n == 3) {
    ass = 180 + Asc2(x1 - 180, -f, sine, cose);
  } else {
    ass = 360 - Asc2(360 - x1, f, sine, cose);
  }
  ass = swe_degnorm(ass);
  if (Math.abs(ass - 90) < VERY_SMALL) {
    // rounding, e.g.: if
    ass = 90; // fi = 0 & st = 0, ac = 89.999...
  }
  if (Math.abs(ass - 180) < VERY_SMALL) {
    ass = 180;
  }
  if (Math.abs(ass - 270) < VERY_SMALL) {
    // rounding, e.g.: if
    ass = 270; // fi = 0 & st = 0, ac = 89.999...
  }
  if (Math.abs(ass - 360) < VERY_SMALL) {
    ass = 0;
  }
  return ass;
}

// Ported Asc2() from swehouse.c
function Asc2(x, f, sine, cose) {
  var ass, sinx;
  ass = -tand(f) * sine + cose * cosd(x);
  if (Math.abs(ass) < VERY_SMALL) {
    ass = 0;
  }
  sinx = sind(x);
  if (Math.abs(sinx) < VERY_SMALL) {
    sinx = 0;
  }
  if (sinx == 0) {
    if (ass < 0) {
      ass = -VERY_SMALL;
    } else {
      ass = VERY_SMALL;
    }
  } else if (ass == 0) {
    if (sinx < 0) {
      ass = -90;
    } else {
      ass = 90;
    }
  } else {
    ass = atand(sinx / ass);
  }
  if (ass < 0) {
    ass = 180 + ass;
  }
  return ass;
}

// Ported sind() function from swehouse.h
function sind(x) {
  return Math.sin(x * DEGTORAD);
}

// Ported cosd() function from swehouse.h
function cosd(x) {
  return Math.cos(x * DEGTORAD);
}

// Ported tand() function from swehouse.h
function tand(x) {
  return Math.tan(x * DEGTORAD);
}

// Ported asind() function from swehouse.h
function asind(x) {
  return Math.asin(x) * RADTODEG;
}

// Ported acosd() function from swehouse.h
// function acosd(x) {
//   return Math.acos(x) * RADTODEG;
// }

// Ported atand() function from swehouse.h
function atand(x) {
  return Math.atan(x) * RADTODEG;
}
